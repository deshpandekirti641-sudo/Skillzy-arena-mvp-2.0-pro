'use client';

import React, { useState, useEffect } from 'react';
import { useLanguage } from '../hooks/useLanguageSystem';
import { useMultiCurrency } from '../hooks/useMultiCurrency';
import LanguageSelector from './LanguageSelector';
import CurrencySelector from './CurrencySelector';

interface InternationalMobileAuthProps {
  onAuthenticated: (userData: any) => void;
}

const InternationalMobileAuth: React.FC<InternationalMobileAuthProps> = ({
  onAuthenticated
}) => {
  const { t, currentLanguage } = useLanguage();
  const { formatAmount, convertToCurrentCurrency, getCurrentCurrencyInfo } = useMultiCurrency();
  
  const [step, setStep] = useState<'welcome' | 'mobile' | 'otp' | 'username' | 'success'>('welcome');
  const [mobileNumber, setMobileNumber] = useState<string>('');
  const [otp, setOtp] = useState<string>('');
  const [username, setUsername] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [timeLeft, setTimeLeft] = useState<number>(0);

  const currencyInfo = getCurrentCurrencyInfo();
  const welcomeBonus = convertToCurrentCurrency(10); // ₹10 welcome bonus

  // Auto-advance timer for better UX
  useEffect(() => {
    if (timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    }
  }, [timeLeft]);

  // Country code detection based on currency
  const getCountryCode = (): string => {
    const countryCodeMap: Record<string, string> = {
      'INR': '+91',
      'USD': '+1',
      'GBP': '+44', 
      'EUR': '+33', // Default to France
      'CNY': '+86',
      'JPY': '+81',
      'KRW': '+82',
      'BRL': '+55',
      'RUB': '+7',
      'AED': '+971',
      'SAR': '+966',
      'CAD': '+1',
      'AUD': '+61'
    };
    return countryCodeMap[currencyInfo.country] || '+91';
  };

  const handleMobileSubmit = (): void => {
    if (mobileNumber.length >= 10) {
      setIsLoading(true);
      
      // Simulate OTP sending
      setTimeout(() => {
        setIsLoading(false);
        setStep('otp');
        setTimeLeft(30); // 30 seconds timer
      }, 2000);
    }
  };

  const handleOtpVerify = (): void => {
    if (otp.length >= 4) {
      setIsLoading(true);
      
      // Simulate OTP verification (always succeeds for demo)
      setTimeout(() => {
        setIsLoading(false);
        setStep('username');
      }, 2000);
    }
  };

  const handleUsernameSubmit = (): void => {
    if (username.trim().length >= 3) {
      setIsLoading(true);
      
      // Create user account
      setTimeout(() => {
        const userData = {
          id: `user_${Date.now()}`,
          mobile: mobileNumber,
          username: username,
          balance: 10, // ₹10 welcome bonus
          currency: currencyInfo.code,
          language: currentLanguage,
          createdAt: new Date().toISOString()
        };
        
        setStep('success');
        
        // Auto-advance to gaming hub after showing success
        setTimeout(() => {
          onAuthenticated(userData);
        }, 3000);
      }, 2000);
    }
  };

  const getWelcomeMessage = (): React.ReactNode => {
    switch (currentLanguage) {
      case 'hi':
        return (
          <div>
            <h1 className="text-4xl font-bold text-white mb-4">स्किल्जी एरिना में स्वागत है</h1>
            <p className="text-xl text-gray-300">भारत का #1 स्किल गेमिंग प्लेटफॉर्म</p>
          </div>
        );
      case 'es':
        return (
          <div>
            <h1 className="text-4xl font-bold text-white mb-4">Bienvenido a Skillzy Arena</h1>
            <p className="text-xl text-gray-300">Plataforma de juegos de habilidad #1</p>
          </div>
        );
      case 'fr':
        return (
          <div>
            <h1 className="text-4xl font-bold text-white mb-4">Bienvenue à Skillzy Arena</h1>
            <p className="text-xl text-gray-300">Plateforme de jeux d'adresse #1</p>
          </div>
        );
      case 'de':
        return (
          <div>
            <h1 className="text-4xl font-bold text-white mb-4">Willkommen bei Skillzy Arena</h1>
            <p className="text-xl text-gray-300">#1 Geschicklichkeitsspiel-Plattform</p>
          </div>
        );
      case 'zh':
        return (
          <div>
            <h1 className="text-4xl font-bold text-white mb-4">欢迎来到技能竞技场</h1>
            <p className="text-xl text-gray-300">#1技能游戏平台</p>
          </div>
        );
      case 'ar':
        return (
          <div className="text-right">
            <h1 className="text-4xl font-bold text-white mb-4">مرحباً بك في ساحة المهارات</h1>
            <p className="text-xl text-gray-300">منصة ألعاب المهارة #1</p>
          </div>
        );
      case 'pt':
        return (
          <div>
            <h1 className="text-4xl font-bold text-white mb-4">Bem-vindo ao Skillzy Arena</h1>
            <p className="text-xl text-gray-300">Plataforma de jogos de habilidade #1</p>
          </div>
        );
      case 'ru':
        return (
          <div>
            <h1 className="text-4xl font-bold text-white mb-4">Добро пожаловать в Skillzy Arena</h1>
            <p className="text-xl text-gray-300">Платформа игр на мастерство #1</p>
          </div>
        );
      case 'ja':
        return (
          <div>
            <h1 className="text-4xl font-bold text-white mb-4">スキルジーアリーナへようこそ</h1>
            <p className="text-xl text-gray-300">#1スキルゲーミングプラットフォーム</p>
          </div>
        );
      case 'ko':
        return (
          <div>
            <h1 className="text-4xl font-bold text-white mb-4">스킬지 아레나에 오신 것을 환영합니다</h1>
            <p className="text-xl text-gray-300">#1 스킬 게이밍 플랫폼</p>
          </div>
        );
      default:
        return (
          <div>
            <h1 className="text-4xl font-bold text-white mb-4">{t('welcome')}</h1>
            <p className="text-xl text-gray-300">India's #1 Skill Gaming Platform</p>
          </div>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
      <div className="max-w-md w-full">
        {/* Language and Currency Selectors */}
        <div className="flex justify-between items-center mb-8">
          <LanguageSelector compact />
          <CurrencySelector compact />
        </div>

        {/* Main Auth Card */}
        <div className="bg-black/30 backdrop-blur-xl rounded-3xl p-8 border border-white/20 shadow-2xl">
          
          {/* Welcome Step */}
          {step === 'welcome' && (
            <div className="text-center">
              <div className="w-20 h-20 bg-gradient-to-r from-purple-500 to-blue-500 rounded-2xl mx-auto mb-6 flex items-center justify-center">
                <span className="text-white font-bold text-2xl">S</span>
              </div>
              
              {getWelcomeMessage()}
              
              <div className="mt-8 space-y-4">
                <div className="bg-gradient-to-r from-yellow-600/20 to-orange-600/20 rounded-xl p-4 border border-yellow-500/30">
                  <div className="flex items-center gap-3">
                    <span className="text-2xl">🎁</span>
                    <div className="text-left">
                      <p className="text-white font-semibold">
                        {currentLanguage === 'en' ? 'Welcome Bonus' :
                         currentLanguage === 'hi' ? 'स्वागत बोनस' :
                         currentLanguage === 'es' ? 'Bono de Bienvenida' :
                         currentLanguage === 'fr' ? 'Bonus de Bienvenue' :
                         'Welcome Bonus'}
                      </p>
                      <p className="text-gray-300 text-sm">
                        {currentLanguage === 'en' ? `Get ${formatAmount(welcomeBonus)} free on signup!` :
                         currentLanguage === 'hi' ? `साइनअप पर ${formatAmount(welcomeBonus)} मुफ्त पाएं!` :
                         currentLanguage === 'es' ? `¡Obtén ${formatAmount(welcomeBonus)} gratis al registrarte!` :
                         currentLanguage === 'fr' ? `Obtenez ${formatAmount(welcomeBonus)} gratuits à l'inscription!` :
                         `Get ${formatAmount(welcomeBonus)} free on signup!`}
                      </p>
                    </div>
                  </div>
                </div>
                
                <button
                  onClick={() => setStep('mobile')}
                  className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 py-4 rounded-xl text-white font-semibold text-lg transition-all shadow-lg shadow-purple-500/25"
                >
                  {currentLanguage === 'en' ? 'Start Playing Now' :
                   currentLanguage === 'hi' ? 'अब खेलना शुरू करें' :
                   currentLanguage === 'es' ? 'Empezar a Jugar Ahora' :
                   currentLanguage === 'fr' ? 'Commencer à Jouer Maintenant' :
                   'Start Playing Now'}
                </button>
              </div>
            </div>
          )}

          {/* Mobile Number Step */}
          {step === 'mobile' && (
            <div>
              <h2 className="text-2xl font-bold text-white mb-2">{t('enterMobile')}</h2>
              <p className="text-gray-400 mb-6">
                {currentLanguage === 'en' ? 'Enter your mobile number to get started' :
                 currentLanguage === 'hi' ? 'शुरू करने के लिए अपना मोबाइल नंबर डालें' :
                 currentLanguage === 'es' ? 'Ingresa tu número de móvil para comenzar' :
                 currentLanguage === 'fr' ? 'Entrez votre numéro de mobile pour commencer' :
                 'Enter your mobile number to get started'}
              </p>
              
              <div className="space-y-4">
                <div className="relative">
                  <div className="absolute left-3 top-1/2 transform -translate-y-1/2 flex items-center gap-2">
                    <span className="text-lg">{currencyInfo.flag}</span>
                    <span className="text-gray-400 text-sm">{getCountryCode()}</span>
                  </div>
                  <input
                    type="tel"
                    value={mobileNumber}
                    onChange={(e) => setMobileNumber(e.target.value.replace(/[^0-9]/g, ''))}
                    placeholder="9876543210"
                    className="w-full pl-20 pr-4 py-4 bg-gray-800/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none transition-colors"
                    maxLength={10}
                  />
                </div>
                
                <button
                  onClick={handleMobileSubmit}
                  disabled={mobileNumber.length < 10 || isLoading}
                  className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed py-4 rounded-xl text-white font-semibold transition-colors flex items-center justify-center gap-2"
                >
                  {isLoading ? (
                    <>
                      <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                      {t('loading')}
                    </>
                  ) : (
                    <>
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                      </svg>
                      {currentLanguage === 'en' ? 'Send OTP' :
                       currentLanguage === 'hi' ? 'ओटीपी भेजें' :
                       currentLanguage === 'es' ? 'Enviar OTP' :
                       currentLanguage === 'fr' ? 'Envoyer OTP' :
                       'Send OTP'}
                    </>
                  )}
                </button>
              </div>
            </div>
          )}

          {/* OTP Step */}
          {step === 'otp' && (
            <div>
              <h2 className="text-2xl font-bold text-white mb-2">{t('enterOTP')}</h2>
              <p className="text-gray-400 mb-6">
                {currentLanguage === 'en' ? `We sent a code to ${getCountryCode()} ${mobileNumber}` :
                 currentLanguage === 'hi' ? `हमने ${getCountryCode()} ${mobileNumber} पर कोड भेजा है` :
                 currentLanguage === 'es' ? `Enviamos un código a ${getCountryCode()} ${mobileNumber}` :
                 currentLanguage === 'fr' ? `Nous avons envoyé un code à ${getCountryCode()} ${mobileNumber}` :
                 `We sent a code to ${getCountryCode()} ${mobileNumber}`}
              </p>
              
              <div className="space-y-4">
                <input
                  type="text"
                  value={otp}
                  onChange={(e) => setOtp(e.target.value.replace(/[^0-9]/g, ''))}
                  placeholder="123456"
                  className="w-full px-4 py-4 bg-gray-800/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none transition-colors text-center text-xl tracking-wider"
                  maxLength={6}
                />
                
                {timeLeft > 0 && (
                  <p className="text-center text-gray-400 text-sm">
                    {currentLanguage === 'en' ? `Resend code in ${timeLeft}s` :
                     currentLanguage === 'hi' ? `${timeLeft}s में कोड फिर भेजें` :
                     currentLanguage === 'es' ? `Reenviar código en ${timeLeft}s` :
                     currentLanguage === 'fr' ? `Renvoyer le code dans ${timeLeft}s` :
                     `Resend code in ${timeLeft}s`}
                  </p>
                )}
                
                <button
                  onClick={handleOtpVerify}
                  disabled={otp.length < 4 || isLoading}
                  className="w-full bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed py-4 rounded-xl text-white font-semibold transition-colors flex items-center justify-center gap-2"
                >
                  {isLoading ? (
                    <>
                      <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                      {currentLanguage === 'en' ? 'Verifying...' :
                       currentLanguage === 'hi' ? 'सत्यापित हो रहा है...' :
                       currentLanguage === 'es' ? 'Verificando...' :
                       currentLanguage === 'fr' ? 'Vérification...' :
                       'Verifying...'}
                    </>
                  ) : (
                    <>
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      {t('verify')}
                    </>
                  )}
                </button>
              </div>
            </div>
          )}

          {/* Username Step */}
          {step === 'username' && (
            <div>
              <h2 className="text-2xl font-bold text-white mb-2">
                {currentLanguage === 'en' ? 'Choose Username' :
                 currentLanguage === 'hi' ? 'उपयोगकर्ता नाम चुनें' :
                 currentLanguage === 'es' ? 'Elegir Nombre de Usuario' :
                 currentLanguage === 'fr' ? 'Choisir Nom d\'Utilisateur' :
                 'Choose Username'}
              </h2>
              <p className="text-gray-400 mb-6">
                {currentLanguage === 'en' ? 'Pick a unique username for your gaming profile' :
                 currentLanguage === 'hi' ? 'अपनी गेमिंग प्रोफ़ाइल के लिए एक अनूठा उपयोगकर्ता नाम चुनें' :
                 currentLanguage === 'es' ? 'Elige un nombre de usuario único para tu perfil de gaming' :
                 currentLanguage === 'fr' ? 'Choisissez un nom d\'utilisateur unique pour votre profil gaming' :
                 'Pick a unique username for your gaming profile'}
              </p>
              
              <div className="space-y-4">
                <input
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value.replace(/[^a-zA-Z0-9_]/g, ''))}
                  placeholder={currentLanguage === 'en' ? 'gaming_master' :
                              currentLanguage === 'hi' ? 'गेमिंग_मास्टर' :
                              currentLanguage === 'es' ? 'maestro_gaming' :
                              currentLanguage === 'fr' ? 'maitre_gaming' :
                              'gaming_master'}
                  className="w-full px-4 py-4 bg-gray-800/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none transition-colors"
                  maxLength={20}
                />
                
                <button
                  onClick={handleUsernameSubmit}
                  disabled={username.length < 3 || isLoading}
                  className="w-full bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed py-4 rounded-xl text-white font-semibold transition-colors flex items-center justify-center gap-2"
                >
                  {isLoading ? (
                    <>
                      <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                      {currentLanguage === 'en' ? 'Creating Account...' :
                       currentLanguage === 'hi' ? 'खाता बनाया जा रहा है...' :
                       currentLanguage === 'es' ? 'Creando Cuenta...' :
                       currentLanguage === 'fr' ? 'Création de Compte...' :
                       'Creating Account...'}
                    </>
                  ) : (
                    <>
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                      {t('register')}
                    </>
                  )}
                </button>
              </div>
            </div>
          )}

          {/* Success Step */}
          {step === 'success' && (
            <div className="text-center">
              <div className="w-20 h-20 bg-green-500 rounded-full mx-auto mb-6 flex items-center justify-center">
                <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              
              <h2 className="text-2xl font-bold text-white mb-4">{t('success')}</h2>
              <p className="text-gray-300 mb-6">
                {currentLanguage === 'en' ? 'Your account has been created successfully!' :
                 currentLanguage === 'hi' ? 'आपका खाता सफलतापूर्वक बनाया गया है!' :
                 currentLanguage === 'es' ? '¡Tu cuenta ha sido creada exitosamente!' :
                 currentLanguage === 'fr' ? 'Votre compte a été créé avec succès!' :
                 'Your account has been created successfully!'}
              </p>
              
              <div className="bg-gradient-to-r from-yellow-600/20 to-orange-600/20 rounded-xl p-4 border border-yellow-500/30 mb-6">
                <div className="flex items-center gap-3 justify-center">
                  <span className="text-2xl">🎉</span>
                  <div>
                    <p className="text-white font-semibold">
                      {formatAmount(welcomeBonus)} {currentLanguage === 'en' ? 'Bonus Added!' :
                                                  currentLanguage === 'hi' ? 'बोनस जोड़ा गया!' :
                                                  currentLanguage === 'es' ? '¡Bono Agregado!' :
                                                  currentLanguage === 'fr' ? 'Bonus Ajouté!' :
                                                  'Bonus Added!'}
                    </p>
                    <p className="text-gray-300 text-sm">
                      {currentLanguage === 'en' ? 'Start playing and win more!' :
                       currentLanguage === 'hi' ? 'खेलना शुरू करें और और जीतें!' :
                       currentLanguage === 'es' ? '¡Empieza a jugar y gana más!' :
                       currentLanguage === 'fr' ? 'Commencez à jouer et gagnez plus!' :
                       'Start playing and win more!'}
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="w-8 h-8 border-4 border-purple-200 border-t-purple-600 rounded-full animate-spin mx-auto"></div>
              <p className="text-gray-400 text-sm mt-2">
                {currentLanguage === 'en' ? 'Redirecting to games...' :
                 currentLanguage === 'hi' ? 'गेम्स पर रीडायरेक्ट हो रहे हैं...' :
                 currentLanguage === 'es' ? 'Redirigiendo a juegos...' :
                 currentLanguage === 'fr' ? 'Redirection vers les jeux...' :
                 'Redirecting to games...'}
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default InternationalMobileAuth;