'use client'

import React, { useState, useEffect } from 'react'
import type { FC } from 'react'

interface UPIPaymentSystemProps {
  onDeposit: (amount: number, method: string, transactionId: string) => void
  onWithdraw: (amount: number, method: string, upiId: string) => void
  currentBalance: number
  isOpen: boolean
  onClose: () => void
}

interface PaymentMethod {
  id: string
  name: string
  icon: string
  type: 'upi' | 'card' | 'netbanking'
  color: string
}

const UPIPaymentSystem: FC<UPIPaymentSystemProps> = ({
  onDeposit,
  onWithdraw,
  currentBalance,
  isOpen,
  onClose
}) => {
  const [activeTab, setActiveTab] = useState<'deposit' | 'withdraw'>('deposit')
  const [amount, setAmount] = useState('')
  const [selectedMethod, setSelectedMethod] = useState<PaymentMethod | null>(null)
  const [upiId, setUpiId] = useState('')
  const [bankAccount, setBankAccount] = useState('')
  const [ifscCode, setIfscCode] = useState('')
  const [isProcessing, setIsProcessing] = useState(false)
  const [transactionStatus, setTransactionStatus] = useState<'idle' | 'processing' | 'success' | 'failed'>('idle')

  const paymentMethods: PaymentMethod[] = [
    { id: 'gpay', name: 'Google Pay', icon: 'üü¢', type: 'upi', color: 'from-blue-500 to-blue-600' },
    { id: 'phonepe', name: 'PhonePe', icon: 'üü£', type: 'upi', color: 'from-purple-500 to-purple-600' },
    { id: 'paytm', name: 'Paytm', icon: 'üîµ', type: 'upi', color: 'from-indigo-500 to-indigo-600' },
    { id: 'upi', name: 'Any UPI', icon: 'üí≥', type: 'upi', color: 'from-green-500 to-green-600' },
    { id: 'card', name: 'Credit/Debit', icon: 'üí≥', type: 'card', color: 'from-orange-500 to-orange-600' },
    { id: 'netbanking', name: 'Net Banking', icon: 'üè¶', type: 'netbanking', color: 'from-red-500 to-red-600' }
  ]

  const quickAmounts = [50, 100, 200, 500, 1000, 2000]

  useEffect(() => {
    if (!isOpen) {
      // Reset form when modal closes
      setAmount('')
      setSelectedMethod(null)
      setUpiId('')
      setBankAccount('')
      setIfscCode('')
      setTransactionStatus('idle')
    }
  }, [isOpen])

  const handleDeposit = async () => {
    if (!amount || !selectedMethod || parseFloat(amount) < 50) {
      alert('Please select amount (minimum ‚Çπ50) and payment method')
      return
    }

    setIsProcessing(true)
    setTransactionStatus('processing')

    // Simulate payment processing
    await new Promise(resolve => setTimeout(resolve, 3000))

    try {
      const transactionId = `TXN${Date.now()}${Math.random().toString(36).substr(2, 5).toUpperCase()}`
      
      // Simulate payment success (90% success rate)
      const isSuccess = Math.random() > 0.1
      
      if (isSuccess) {
        onDeposit(parseFloat(amount), selectedMethod.name, transactionId)
        setTransactionStatus('success')
        setTimeout(() => {
          onClose()
        }, 2000)
      } else {
        setTransactionStatus('failed')
      }
    } catch (error) {
      setTransactionStatus('failed')
    } finally {
      setIsProcessing(false)
    }
  }

  const handleWithdraw = async () => {
    if (!amount || parseFloat(amount) < 100 || parseFloat(amount) > currentBalance) {
      alert('Invalid withdrawal amount')
      return
    }

    if (selectedMethod?.type === 'upi' && !upiId) {
      alert('Please enter UPI ID')
      return
    }

    if (selectedMethod?.type === 'netbanking' && (!bankAccount || !ifscCode)) {
      alert('Please enter bank account details')
      return
    }

    setIsProcessing(true)
    setTransactionStatus('processing')

    // Simulate withdrawal processing
    await new Promise(resolve => setTimeout(resolve, 4000))

    try {
      const transactionId = `WDL${Date.now()}${Math.random().toString(36).substr(2, 5).toUpperCase()}`
      onWithdraw(parseFloat(amount), selectedMethod?.name || '', upiId || bankAccount)
      setTransactionStatus('success')
      setTimeout(() => {
        onClose()
      }, 2000)
    } catch (error) {
      setTransactionStatus('failed')
    } finally {
      setIsProcessing(false)
    }
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md bg-white rounded-3xl shadow-2xl max-h-[90vh] overflow-y-auto">
        
        {/* Header */}
        <div className="sticky top-0 bg-white rounded-t-3xl border-b p-4 flex items-center justify-between">
          <h2 className="text-xl font-bold text-gray-800">Payment Center</h2>
          <button
            onClick={onClose}
            className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center hover:bg-gray-200 transition-colors"
          >
            ‚úï
          </button>
        </div>

        {/* Tab Selector */}
        <div className="p-4 pb-0">
          <div className="bg-gray-100 rounded-2xl p-1 flex">
            <button
              onClick={() => setActiveTab('deposit')}
              className={`flex-1 py-3 rounded-xl font-medium transition-all ${
                activeTab === 'deposit'
                  ? 'bg-white text-green-600 shadow-sm'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              üí∞ Add Money
            </button>
            <button
              onClick={() => setActiveTab('withdraw')}
              className={`flex-1 py-3 rounded-xl font-medium transition-all ${
                activeTab === 'withdraw'
                  ? 'bg-white text-blue-600 shadow-sm'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              üí∏ Withdraw
            </button>
          </div>
        </div>

        <div className="p-4 space-y-4">
          
          {/* Balance Display */}
          <div className="bg-gradient-to-r from-green-400 to-green-500 rounded-2xl p-4 text-white">
            <p className="text-sm opacity-90">Current Balance</p>
            <p className="text-2xl font-bold">‚Çπ{currentBalance}</p>
          </div>

          {/* Transaction Status */}
          {transactionStatus !== 'idle' && (
            <div className={`rounded-2xl p-4 text-center ${
              transactionStatus === 'processing' ? 'bg-yellow-50 border border-yellow-200' :
              transactionStatus === 'success' ? 'bg-green-50 border border-green-200' :
              'bg-red-50 border border-red-200'
            }`}>
              {transactionStatus === 'processing' && (
                <div className="flex items-center justify-center space-x-2">
                  <div className="w-5 h-5 border-2 border-yellow-500 border-t-transparent rounded-full animate-spin"></div>
                  <span className="text-yellow-700 font-medium">Processing {activeTab}...</span>
                </div>
              )}
              {transactionStatus === 'success' && (
                <div className="space-y-2">
                  <div className="text-2xl">‚úÖ</div>
                  <p className="text-green-700 font-medium">
                    {activeTab === 'deposit' ? 'Deposit' : 'Withdrawal'} Successful!
                  </p>
                </div>
              )}
              {transactionStatus === 'failed' && (
                <div className="space-y-2">
                  <div className="text-2xl">‚ùå</div>
                  <p className="text-red-700 font-medium">Transaction Failed</p>
                  <p className="text-red-600 text-sm">Please try again</p>
                </div>
              )}
            </div>
          )}

          {/* Amount Selection */}
          {transactionStatus === 'idle' && (
            <>
              <div className="space-y-3">
                <label className="block text-sm font-medium text-gray-700">
                  {activeTab === 'deposit' ? 'Add Amount' : 'Withdraw Amount'}
                </label>
                
                {/* Quick Amount Buttons */}
                <div className="grid grid-cols-3 gap-2">
                  {quickAmounts.map((quickAmount) => (
                    <button
                      key={quickAmount}
                      onClick={() => setAmount(quickAmount.toString())}
                      disabled={activeTab === 'withdraw' && quickAmount > currentBalance}
                      className={`py-2 px-3 rounded-xl text-sm font-medium border-2 transition-all ${
                        amount === quickAmount.toString()
                          ? 'border-blue-500 bg-blue-50 text-blue-600'
                          : activeTab === 'withdraw' && quickAmount > currentBalance
                          ? 'border-gray-200 bg-gray-50 text-gray-400 cursor-not-allowed'
                          : 'border-gray-200 bg-white text-gray-700 hover:border-blue-300'
                      }`}
                    >
                      ‚Çπ{quickAmount}
                    </button>
                  ))}
                </div>

                {/* Custom Amount Input */}
                <div className="relative">
                  <span className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 font-medium">‚Çπ</span>
                  <input
                    type="number"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    placeholder={activeTab === 'deposit' ? 'Min ‚Çπ50' : 'Min ‚Çπ100'}
                    className="w-full pl-8 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none text-lg font-medium"
                  />
                </div>

                {activeTab === 'deposit' && parseFloat(amount) > 0 && parseFloat(amount) < 50 && (
                  <p className="text-red-500 text-sm">Minimum deposit amount is ‚Çπ50</p>
                )}
                {activeTab === 'withdraw' && parseFloat(amount) > currentBalance && (
                  <p className="text-red-500 text-sm">Insufficient balance</p>
                )}
              </div>

              {/* Payment Methods */}
              <div className="space-y-3">
                <label className="block text-sm font-medium text-gray-700">Payment Method</label>
                <div className="grid grid-cols-2 gap-2">
                  {paymentMethods.map((method) => (
                    <button
                      key={method.id}
                      onClick={() => setSelectedMethod(method)}
                      className={`p-3 rounded-xl border-2 transition-all text-left ${
                        selectedMethod?.id === method.id
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 bg-white hover:border-blue-300'
                      }`}
                    >
                      <div className="flex items-center space-x-2">
                        <span className="text-lg">{method.icon}</span>
                        <div>
                          <p className="text-sm font-medium text-gray-800">{method.name}</p>
                          <p className="text-xs text-gray-500 capitalize">{method.type}</p>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
              </div>

              {/* Additional Details for Withdrawal */}
              {activeTab === 'withdraw' && selectedMethod && (
                <div className="space-y-3">
                  {selectedMethod.type === 'upi' && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">UPI ID</label>
                      <input
                        type="text"
                        value={upiId}
                        onChange={(e) => setUpiId(e.target.value)}
                        placeholder="yourname@upi"
                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none"
                      />
                    </div>
                  )}
                  {selectedMethod.type === 'netbanking' && (
                    <div className="space-y-3">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Bank Account Number</label>
                        <input
                          type="text"
                          value={bankAccount}
                          onChange={(e) => setBankAccount(e.target.value)}
                          placeholder="Enter account number"
                          className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">IFSC Code</label>
                        <input
                          type="text"
                          value={ifscCode}
                          onChange={(e) => setIfscCode(e.target.value)}
                          placeholder="Enter IFSC code"
                          className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none uppercase"
                        />
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Action Button */}
              <button
                onClick={activeTab === 'deposit' ? handleDeposit : handleWithdraw}
                disabled={
                  isProcessing ||
                  !amount ||
                  !selectedMethod ||
                  (activeTab === 'deposit' && parseFloat(amount) < 50) ||
                  (activeTab === 'withdraw' && (parseFloat(amount) < 100 || parseFloat(amount) > currentBalance)) ||
                  (activeTab === 'withdraw' && selectedMethod.type === 'upi' && !upiId) ||
                  (activeTab === 'withdraw' && selectedMethod.type === 'netbanking' && (!bankAccount || !ifscCode))
                }
                className={`w-full py-4 rounded-2xl text-white font-bold text-lg transition-all ${
                  isProcessing || !amount || !selectedMethod
                    ? 'bg-gray-400 cursor-not-allowed'
                    : activeTab === 'deposit'
                    ? 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 active:scale-95'
                    : 'bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 active:scale-95'
                }`}
              >
                {isProcessing ? (
                  <div className="flex items-center justify-center space-x-2">
                    <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    <span>Processing...</span>
                  </div>
                ) : activeTab === 'deposit' ? (
                  `Add ‚Çπ${amount || 0}`
                ) : (
                  `Withdraw ‚Çπ${amount || 0}`
                )}
              </button>

              {/* Info Text */}
              <div className="text-center text-xs text-gray-500 space-y-1">
                {activeTab === 'deposit' ? (
                  <>
                    <p>üí≥ Instant deposit ‚Ä¢ üîí 100% secure</p>
                    <p>Minimum ‚Çπ50 ‚Ä¢ Maximum ‚Çπ50,000 per transaction</p>
                  </>
                ) : (
                  <>
                    <p>üí∏ Processed within 24 hours ‚Ä¢ üîí Secure transfer</p>
                    <p>Minimum ‚Çπ100 ‚Ä¢ KYC required for amounts above ‚Çπ10,000</p>
                  </>
                )}
              </div>
            </>
          )}

        </div>
      </div>
    </div>
  )
}

export default UPIPaymentSystem