'use client'

import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { useGlobalSpacetimeCore } from '@/hooks/useGlobalSpacetimeCore'
import type { DeveloperEarningsType } from '@/spacetime_module_bindings'

interface DeveloperStats {
  totalEarnings: number
  totalMatches: number
  totalBets: number
  commissionRate: number
  lastUpdated: string
}

interface SecureDeveloperDashboardProps {
  developerId: string
  onLogout: () => void
}

export const SecureDeveloperDashboard: React.FC<SecureDeveloperDashboardProps> = ({ developerId, onLogout }) => {
  const [stats, setStats] = useState<DeveloperStats | null>(null)
  const [walletBalance, setWalletBalance] = useState<number>(0)
  const [isLoading, setIsLoading] = useState<boolean>(true)
  const [activeTab, setActiveTab] = useState<string>('overview')
  const [withdrawAmount, setWithdrawAmount] = useState<string>('')
  const [depositAmount, setDepositAmount] = useState<string>('')
  
  const { spacetimeCore, connectionStatus, identity } = useGlobalSpacetimeCore()

  // Load developer earnings and stats
  useEffect(() => {
    const loadDeveloperData = (): void => {
      if (spacetimeCore && connectionStatus === 'connected') {
        try {
          // Get developer earnings from SpacetimeDB
          const earnings = spacetimeCore.developer_earnings.findAll()
          if (earnings.length > 0) {
            const latest = earnings[0]
            setStats({
              totalEarnings: latest.total_earnings_cents / 100, // Convert to rupees
              totalMatches: Number(latest.total_matches),
              totalBets: latest.total_bets_cents / 100,
              commissionRate: latest.commission_rate * 100,
              lastUpdated: new Date(latest.last_updated).toLocaleString()
            })
            
            // Developer wallet is essentially the total earnings
            setWalletBalance(latest.total_earnings_cents / 100)
          }
        } catch (error) {
          console.error('Failed to load developer data:', error)
        }
      }
      setIsLoading(false)
    }

    loadDeveloperData()
    const interval = setInterval(loadDeveloperData, 10000) // Update every 10 seconds

    return () => clearInterval(interval)
  }, [spacetimeCore, connectionStatus])

  const handleWithdrawal = async (): Promise<void> => {
    const amount = parseFloat(withdrawAmount)
    if (!amount || amount <= 0) return

    if (amount > walletBalance) {
      alert('❌ Insufficient balance for withdrawal')
      return
    }

    // In a real implementation, this would integrate with payment gateways
    const confirmed = confirm(`Withdraw ₹${amount.toFixed(2)} to your registered bank account?`)
    if (confirmed) {
      // Simulate withdrawal processing
      alert(`🏦 Withdrawal request for ₹${amount.toFixed(2)} has been processed.\nFunds will be transferred to your account within 24 hours.`)
      setWithdrawAmount('')
      
      // In production, this would call a SpacetimeDB reducer to record the withdrawal
      setWalletBalance(prev => prev - amount)
    }
  }

  const handleDeposit = async (): Promise<void> => {
    const amount = parseFloat(depositAmount)
    if (!amount || amount <= 0) return

    // In a real implementation, this would integrate with payment gateways
    const confirmed = confirm(`Add ₹${amount.toFixed(2)} to developer wallet via UPI/Net Banking?`)
    if (confirmed) {
      // Simulate deposit processing
      alert(`💳 Deposit of ₹${amount.toFixed(2)} has been processed.\nFunds added to your developer wallet.`)
      setDepositAmount('')
      
      // In production, this would call a SpacetimeDB reducer to record the deposit
      setWalletBalance(prev => prev + amount)
    }
  }

  const formatCurrency = (amount: number): string => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 2
    }).format(amount)
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-indigo-900 flex items-center justify-center">
        <div className="text-white text-xl">📊 Loading Developer Dashboard...</div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-indigo-900 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-3xl font-bold text-white">🎮 Skillzy Arena - Developer Control Panel</h1>
            <p className="text-gray-400">Exclusive access for platform owner</p>
          </div>
          <div className="flex items-center gap-4">
            <Badge variant="outline" className="border-green-500 text-green-400">
              🟢 {connectionStatus}
            </Badge>
            <Badge className="bg-purple-600">
              👨‍💻 {developerId}
            </Badge>
            <Button onClick={onLogout} variant="outline" className="border-red-500 text-red-400 hover:bg-red-900/20">
              🚪 Logout
            </Button>
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <Card className="bg-gray-900/90 border-purple-500/20">
            <CardContent className="p-4">
              <div className="text-2xl font-bold text-green-400">{formatCurrency(walletBalance)}</div>
              <p className="text-sm text-gray-400">Developer Wallet</p>
            </CardContent>
          </Card>
          
          <Card className="bg-gray-900/90 border-purple-500/20">
            <CardContent className="p-4">
              <div className="text-2xl font-bold text-blue-400">{formatCurrency(stats?.totalEarnings || 0)}</div>
              <p className="text-sm text-gray-400">Total Earnings</p>
            </CardContent>
          </Card>
          
          <Card className="bg-gray-900/90 border-purple-500/20">
            <CardContent className="p-4">
              <div className="text-2xl font-bold text-yellow-400">{stats?.totalMatches || 0}</div>
              <p className="text-sm text-gray-400">Total Matches</p>
            </CardContent>
          </Card>
          
          <Card className="bg-gray-900/90 border-purple-500/20">
            <CardContent className="p-4">
              <div className="text-2xl font-bold text-purple-400">{stats?.commissionRate.toFixed(1) || 20}%</div>
              <p className="text-sm text-gray-400">Commission Rate</p>
            </CardContent>
          </Card>
        </div>

        {/* Main Dashboard */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-5 bg-gray-800 border-gray-600">
            <TabsTrigger value="overview" className="data-[state=active]:bg-purple-600">📊 Overview</TabsTrigger>
            <TabsTrigger value="wallet" className="data-[state=active]:bg-purple-600">💰 Wallet</TabsTrigger>
            <TabsTrigger value="analytics" className="data-[state=active]:bg-purple-600">📈 Analytics</TabsTrigger>
            <TabsTrigger value="control" className="data-[state=active]:bg-purple-600">⚙️ Control</TabsTrigger>
            <TabsTrigger value="security" className="data-[state=active]:bg-purple-600">🔒 Security</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="mt-4">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card className="bg-gray-900/90 border-purple-500/20">
                <CardHeader>
                  <CardTitle className="text-white">📊 Revenue Overview</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex justify-between">
                    <span className="text-gray-400">Total Platform Revenue:</span>
                    <span className="text-green-400 font-bold">{formatCurrency(stats?.totalEarnings || 0)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Total Bets Processed:</span>
                    <span className="text-blue-400 font-bold">{formatCurrency(stats?.totalBets || 0)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Revenue Share (80/20):</span>
                    <span className="text-purple-400 font-bold">₹16 winner / ₹4 platform</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Last Updated:</span>
                    <span className="text-yellow-400 text-sm">{stats?.lastUpdated || 'Never'}</span>
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gray-900/90 border-purple-500/20">
                <CardHeader>
                  <CardTitle className="text-white">🎮 Platform Status</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex justify-between">
                    <span className="text-gray-400">Connection Status:</span>
                    <Badge className={connectionStatus === 'connected' ? 'bg-green-600' : 'bg-red-600'}>
                      {connectionStatus === 'connected' ? '🟢 Connected' : '🔴 Offline'}
                    </Badge>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Identity:</span>
                    <span className="text-blue-400 text-sm font-mono">{identity?.toString().slice(0, 16)}...</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Games Available:</span>
                    <span className="text-green-400">Chess, Snake & Ladder, Carrom</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Fixed Bet Amount:</span>
                    <span className="text-yellow-400 font-bold">₹10</span>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="wallet" className="mt-4">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card className="bg-gray-900/90 border-green-500/20">
                <CardHeader>
                  <CardTitle className="text-white">💳 Withdraw Earnings</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <label className="text-sm text-gray-400">Available Balance: {formatCurrency(walletBalance)}</label>
                    <input
                      type="number"
                      value={withdrawAmount}
                      onChange={(e) => setWithdrawAmount(e.target.value)}
                      placeholder="Enter withdrawal amount"
                      className="w-full p-3 bg-gray-800 border border-gray-600 rounded text-white"
                      step="0.01"
                      min="0"
                      max={walletBalance}
                    />
                  </div>
                  
                  <div className="space-y-2 text-sm text-gray-400">
                    <p>• Minimum withdrawal: ₹100</p>
                    <p>• Processing time: 24 hours</p>
                    <p>• Transfer to registered bank account</p>
                  </div>
                  
                  <Button 
                    onClick={handleWithdrawal}
                    disabled={!withdrawAmount || parseFloat(withdrawAmount) <= 0}
                    className="w-full bg-gradient-to-r from-green-600 to-blue-600"
                  >
                    🏦 Withdraw Funds
                  </Button>
                </CardContent>
              </Card>

              <Card className="bg-gray-900/90 border-blue-500/20">
                <CardHeader>
                  <CardTitle className="text-white">💰 Add Funds</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <label className="text-sm text-gray-400">Add to Developer Wallet</label>
                    <input
                      type="number"
                      value={depositAmount}
                      onChange={(e) => setDepositAmount(e.target.value)}
                      placeholder="Enter deposit amount"
                      className="w-full p-3 bg-gray-800 border border-gray-600 rounded text-white"
                      step="0.01"
                      min="0"
                    />
                  </div>
                  
                  <div className="space-y-2 text-sm text-gray-400">
                    <p>• UPI / Net Banking / Cards accepted</p>
                    <p>• Instant processing</p>
                    <p>• For operational expenses</p>
                  </div>
                  
                  <Button 
                    onClick={handleDeposit}
                    disabled={!depositAmount || parseFloat(depositAmount) <= 0}
                    className="w-full bg-gradient-to-r from-blue-600 to-purple-600"
                  >
                    💳 Add Funds
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="analytics" className="mt-4">
            <div className="space-y-6">
              <Card className="bg-gray-900/90 border-purple-500/20">
                <CardHeader>
                  <CardTitle className="text-white">📈 Revenue Analytics</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="text-center">
                      <div className="text-3xl font-bold text-green-400">{formatCurrency(stats?.totalEarnings || 0)}</div>
                      <p className="text-sm text-gray-400">Total Revenue (All Time)</p>
                    </div>
                    <div className="text-center">
                      <div className="text-3xl font-bold text-blue-400">{stats?.totalMatches || 0}</div>
                      <p className="text-sm text-gray-400">Completed Matches</p>
                    </div>
                    <div className="text-center">
                      <div className="text-3xl font-bold text-purple-400">₹4.00</div>
                      <p className="text-sm text-gray-400">Average per Match</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="control" className="mt-4">
            <Card className="bg-gray-900/90 border-yellow-500/20">
              <CardHeader>
                <CardTitle className="text-white">⚙️ App Controls</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Button className="bg-green-600 hover:bg-green-700">
                    ✅ App Status: Online
                  </Button>
                  <Button className="bg-blue-600 hover:bg-blue-700">
                    🎮 All Games Active
                  </Button>
                  <Button className="bg-purple-600 hover:bg-purple-700">
                    💰 Betting: ₹10 Fixed
                  </Button>
                  <Button className="bg-yellow-600 hover:bg-yellow-700">
                    📊 Analytics: Live
                  </Button>
                </div>
                
                <div className="mt-6 p-4 bg-gray-800/50 rounded border border-gray-600">
                  <h3 className="text-lg font-semibold text-white mb-2">🔧 Quick Actions</h3>
                  <div className="text-sm text-gray-400 space-y-1">
                    <p>• All systems operational and monitoring active</p>
                    <p>• Real-time match processing enabled</p>
                    <p>• Payment gateway connections verified</p>
                    <p>• Anti-cheat systems active</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="security" className="mt-4">
            <Card className="bg-gray-900/90 border-red-500/20">
              <CardHeader>
                <CardTitle className="text-white">🔒 Security & Audit</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                    <span className="text-gray-300">Developer Authentication</span>
                    <Badge className="bg-green-600">✅ Active</Badge>
                  </div>
                  
                  <div className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                    <span className="text-gray-300">Wallet Access Control</span>
                    <Badge className="bg-green-600">🔐 Secured</Badge>
                  </div>
                  
                  <div className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                    <span className="text-gray-300">Transaction Logging</span>
                    <Badge className="bg-green-600">📝 Enabled</Badge>
                  </div>
                  
                  <div className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                    <span className="text-gray-300">Anti-Fraud Monitoring</span>
                    <Badge className="bg-green-600">👁️ Active</Badge>
                  </div>
                </div>
                
                <div className="mt-6 p-4 bg-red-900/20 border border-red-500/20 rounded">
                  <h3 className="text-red-400 font-semibold mb-2">⚠️ Security Notice</h3>
                  <p className="text-red-300 text-sm">
                    Only authorized developers can access this panel. All actions are logged and monitored.
                    Unauthorized access attempts will be blocked and reported.
                  </p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}