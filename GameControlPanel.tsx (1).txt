'use client'

import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Badge } from '@/components/ui/badge'
import { Switch } from '@/components/ui/switch'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { toast } from 'sonner'

interface GameConfig {
  id: string
  name: string
  isActive: boolean
  betAmount: number
  maxPlayers: number
  matchDuration: number
  winnerSplit: number
  platformFee: number
}

interface MaintenanceWindow {
  start: string
  end: string
  reason: string
}

export const GameControlPanel: React.FC = () => {
  const [games, setGames] = useState<GameConfig[]>([])
  const [serverMaintenance, setServerMaintenance] = useState(false)
  const [maintenanceWindow, setMaintenanceWindow] = useState<MaintenanceWindow>({
    start: '',
    end: '',
    reason: ''
  })
  const [announcement, setAnnouncement] = useState('')
  const [isUpdating, setIsUpdating] = useState(false)

  // Initialize game configurations
  useEffect(() => {
    const initialGames: GameConfig[] = [
      {
        id: 'temple_run',
        name: 'üèÉ‚Äç‚ôÇÔ∏è Temple Run 3D',
        isActive: true,
        betAmount: 10,
        maxPlayers: 2,
        matchDuration: 60,
        winnerSplit: 60,
        platformFee: 40
      },
      {
        id: 'traffic_race',
        name: 'üèéÔ∏è Traffic Race 3D',
        isActive: true,
        betAmount: 10,
        maxPlayers: 2,
        matchDuration: 60,
        winnerSplit: 60,
        platformFee: 40
      }
    ]
    setGames(initialGames)
  }, [])

  const handleGameToggle = async (gameId: string): Promise<void> => {
    setIsUpdating(true)
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      setGames(prev => prev.map(game => 
        game.id === gameId 
          ? { ...game, isActive: !game.isActive }
          : game
      ))
      
      const game = games.find(g => g.id === gameId)
      toast.success(`${game?.name} ${game?.isActive ? 'disabled' : 'enabled'}!`)
    } catch (error) {
      toast.error('Failed to update game status')
    }
    
    setIsUpdating(false)
  }

  const handleGameConfigUpdate = async (gameId: string, updates: Partial<GameConfig>): Promise<void> => {
    setIsUpdating(true)
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1500))
      
      setGames(prev => prev.map(game => 
        game.id === gameId 
          ? { ...game, ...updates }
          : game
      ))
      
      toast.success('Game configuration updated successfully!')
    } catch (error) {
      toast.error('Failed to update game configuration')
    }
    
    setIsUpdating(false)
  }

  const handleMaintenanceToggle = async (): Promise<void> => {
    if (!serverMaintenance && (!maintenanceWindow.start || !maintenanceWindow.end || !maintenanceWindow.reason)) {
      toast.error('Please fill in all maintenance details')
      return
    }

    setIsUpdating(true)
    
    try {
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      setServerMaintenance(!serverMaintenance)
      
      if (!serverMaintenance) {
        toast.success(`üîß Maintenance mode scheduled for ${maintenanceWindow.start} - ${maintenanceWindow.end}`)
      } else {
        toast.success('‚úÖ Maintenance mode disabled')
        setMaintenanceWindow({ start: '', end: '', reason: '' })
      }
    } catch (error) {
      toast.error('Failed to update maintenance mode')
    }
    
    setIsUpdating(false)
  }

  const handleAnnouncement = async (): Promise<void> => {
    if (!announcement.trim()) {
      toast.error('Please enter an announcement message')
      return
    }

    setIsUpdating(true)
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      toast.success('üì¢ Announcement sent to all players!')
      setAnnouncement('')
    } catch (error) {
      toast.error('Failed to send announcement')
    }
    
    setIsUpdating(false)
  }

  const emergencyStop = async (): Promise<void> => {
    if (!confirm('‚ö†Ô∏è Are you sure you want to emergency stop all games? This will cancel all active matches!')) {
      return
    }

    setIsUpdating(true)
    
    try {
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      setGames(prev => prev.map(game => ({ ...game, isActive: false })))
      toast.success('üö® Emergency stop activated! All games disabled.')
    } catch (error) {
      toast.error('Failed to execute emergency stop')
    }
    
    setIsUpdating(false)
  }

  return (
    <div className="space-y-6">
      {/* Game Status Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {games.map((game) => (
          <Card key={game.id} className={`bg-gradient-to-br ${game.isActive ? 'from-green-900/50 to-blue-900/50 border-green-500/20' : 'from-red-900/50 to-gray-900/50 border-red-500/20'}`}>
            <CardHeader className="pb-3">
              <div className="flex justify-between items-center">
                <CardTitle className="text-white text-lg">{game.name}</CardTitle>
                <Badge className={game.isActive ? 'bg-green-500/20 text-green-300 border-green-500/50' : 'bg-red-500/20 text-red-300 border-red-500/50'}>
                  {game.isActive ? 'üü¢ Active' : 'üî¥ Disabled'}
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-gray-400">Bet Amount:</span>
                  <div className="text-white font-bold">‚Çπ{game.betAmount}</div>
                </div>
                <div>
                  <span className="text-gray-400">Match Duration:</span>
                  <div className="text-white font-bold">{game.matchDuration}s</div>
                </div>
                <div>
                  <span className="text-gray-400">Winner Split:</span>
                  <div className="text-white font-bold">{game.winnerSplit}%</div>
                </div>
                <div>
                  <span className="text-gray-400">Platform Fee:</span>
                  <div className="text-white font-bold">{game.platformFee}%</div>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <Label htmlFor={`toggle-${game.id}`} className="text-white">
                  Game Status
                </Label>
                <Switch
                  id={`toggle-${game.id}`}
                  checked={game.isActive}
                  onCheckedChange={() => handleGameToggle(game.id)}
                  disabled={isUpdating}
                />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Global Controls */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Maintenance Mode */}
        <Card className="bg-gradient-to-br from-orange-900/50 to-red-900/50 border-orange-500/20">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              üîß Maintenance Mode
            </CardTitle>
            <CardDescription className="text-gray-300">
              Schedule server maintenance windows
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex justify-between items-center">
              <Label htmlFor="maintenance-toggle" className="text-white">
                Maintenance Mode
              </Label>
              <Badge className={serverMaintenance ? 'bg-orange-500/20 text-orange-300 border-orange-500/50' : 'bg-green-500/20 text-green-300 border-green-500/50'}>
                {serverMaintenance ? 'üîß Scheduled' : '‚úÖ Normal'}
              </Badge>
            </div>

            {!serverMaintenance && (
              <>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label className="text-white text-sm">Start Time</Label>
                    <Input
                      type="datetime-local"
                      value={maintenanceWindow.start}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => 
                        setMaintenanceWindow(prev => ({ ...prev, start: e.target.value }))
                      }
                      className="bg-white/10 border-white/20 text-white"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label className="text-white text-sm">End Time</Label>
                    <Input
                      type="datetime-local"
                      value={maintenanceWindow.end}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => 
                        setMaintenanceWindow(prev => ({ ...prev, end: e.target.value }))
                      }
                      className="bg-white/10 border-white/20 text-white"
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label className="text-white text-sm">Reason</Label>
                  <Input
                    placeholder="e.g., Server upgrades, bug fixes"
                    value={maintenanceWindow.reason}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => 
                      setMaintenanceWindow(prev => ({ ...prev, reason: e.target.value }))
                    }
                    className="bg-white/10 border-white/20 text-white placeholder-gray-400"
                  />
                </div>
              </>
            )}

            <Button
              onClick={handleMaintenanceToggle}
              disabled={isUpdating}
              className={`w-full ${serverMaintenance 
                ? 'bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700' 
                : 'bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700'
              }`}
            >
              {isUpdating ? '‚è≥ Updating...' : (serverMaintenance ? '‚úÖ Cancel Maintenance' : 'üîß Schedule Maintenance')}
            </Button>
          </CardContent>
        </Card>

        {/* Player Announcements */}
        <Card className="bg-gradient-to-br from-purple-900/50 to-pink-900/50 border-purple-500/20">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              üì¢ Player Announcements
            </CardTitle>
            <CardDescription className="text-gray-300">
              Send notifications to all players
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label className="text-white">Announcement Message</Label>
              <Textarea
                placeholder="Enter your announcement message..."
                value={announcement}
                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setAnnouncement(e.target.value)}
                className="bg-white/10 border-white/20 text-white placeholder-gray-400 min-h-[100px]"
              />
            </div>
            
            <div className="text-xs text-gray-400">
              üí° Tips: Keep messages clear and concise. Include emojis for better visibility.
            </div>

            <Button
              onClick={handleAnnouncement}
              disabled={isUpdating || !announcement.trim()}
              className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
            >
              {isUpdating ? 'üì§ Sending...' : 'üì¢ Send Announcement'}
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Emergency Controls */}
      <Card className="bg-gradient-to-br from-red-900/50 to-pink-900/50 border-red-500/20">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            üö® Emergency Controls
          </CardTitle>
          <CardDescription className="text-gray-300">
            Critical system controls - use with caution
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex justify-between items-center">
            <div>
              <h4 className="text-white font-semibold">Emergency Stop All Games</h4>
              <p className="text-sm text-gray-400">
                Immediately disable all games and cancel active matches
              </p>
            </div>
            <Button
              onClick={emergencyStop}
              disabled={isUpdating}
              className="bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700"
            >
              {isUpdating ? '‚è≥ Stopping...' : 'üö® Emergency Stop'}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}