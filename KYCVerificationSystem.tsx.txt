'use client'

import React, { useState, useEffect } from 'react'
import type { FC } from 'react'

interface KYCVerificationSystemProps {
  isOpen: boolean
  onClose: () => void
  onVerificationComplete: (kycData: KYCData) => void
  currentKYCStatus: 'not_started' | 'pending' | 'verified' | 'rejected'
}

interface KYCData {
  aadhaarNumber: string
  panNumber: string
  fullName: string
  dateOfBirth: string
  address: string
  phoneNumber: string
  email: string
  bankAccountNumber: string
  ifscCode: string
  accountHolderName: string
  documents: {
    aadhaarFront: string | null
    aadhaarBack: string | null
    panCard: string | null
    bankPassbook: string | null
  }
}

const KYCVerificationSystem: FC<KYCVerificationSystemProps> = ({
  isOpen,
  onClose,
  onVerificationComplete,
  currentKYCStatus
}) => {
  const [currentStep, setCurrentStep] = useState(1)
  const [isProcessing, setIsProcessing] = useState(false)
  const [formData, setFormData] = useState<KYCData>({
    aadhaarNumber: '',
    panNumber: '',
    fullName: '',
    dateOfBirth: '',
    address: '',
    phoneNumber: '',
    email: '',
    bankAccountNumber: '',
    ifscCode: '',
    accountHolderName: '',
    documents: {
      aadhaarFront: null,
      aadhaarBack: null,
      panCard: null,
      bankPassbook: null
    }
  })

  const steps = [
    { id: 1, title: 'Personal Details', icon: 'üë§', description: 'Basic information' },
    { id: 2, title: 'Identity Proof', icon: 'üÜî', description: 'Aadhaar & PAN verification' },
    { id: 3, title: 'Bank Details', icon: 'üè¶', description: 'Banking information' },
    { id: 4, title: 'Documents', icon: 'üìÑ', description: 'Upload documents' },
    { id: 5, title: 'Review', icon: '‚úÖ', description: 'Final verification' }
  ]

  const handleInputChange = (field: keyof KYCData, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleDocumentUpload = (docType: keyof KYCData['documents'], file: File) => {
    // Simulate document upload
    const reader = new FileReader()
    reader.onload = (e) => {
      const result = e.target?.result as string
      setFormData(prev => ({
        ...prev,
        documents: {
          ...prev.documents,
          [docType]: result
        }
      }))
    }
    reader.readAsDataURL(file)
  }

  const validateStep = (step: number): boolean => {
    switch (step) {
      case 1:
        return !!(formData.fullName && formData.dateOfBirth && formData.address && formData.phoneNumber && formData.email)
      case 2:
        return !!(formData.aadhaarNumber && formData.panNumber && 
                 formData.aadhaarNumber.length === 12 && formData.panNumber.length === 10)
      case 3:
        return !!(formData.bankAccountNumber && formData.ifscCode && formData.accountHolderName)
      case 4:
        return !!(formData.documents.aadhaarFront && formData.documents.aadhaarBack && 
                 formData.documents.panCard && formData.documents.bankPassbook)
      default:
        return true
    }
  }

  const handleNext = () => {
    if (validateStep(currentStep)) {
      if (currentStep < 5) {
        setCurrentStep(currentStep + 1)
      } else {
        handleSubmit()
      }
    } else {
      alert('Please fill in all required fields')
    }
  }

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleSubmit = async () => {
    setIsProcessing(true)
    
    // Simulate KYC processing
    await new Promise(resolve => setTimeout(resolve, 3000))
    
    // Submit to backend (mock)
    onVerificationComplete(formData)
    setIsProcessing(false)
    onClose()
  }

  if (!isOpen) return null

  // Show status if already verified or pending
  if (currentKYCStatus !== 'not_started') {
    return (
      <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
        <div className="w-full max-w-md bg-white rounded-3xl shadow-2xl p-6 space-y-6">
          <div className="text-center">
            <button
              onClick={onClose}
              className="absolute top-4 right-4 w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center hover:bg-gray-200 transition-colors"
            >
              ‚úï
            </button>
            
            {currentKYCStatus === 'pending' && (
              <>
                <div className="text-6xl mb-4">‚è≥</div>
                <h2 className="text-2xl font-bold text-orange-600 mb-2">KYC Under Review</h2>
                <p className="text-gray-600">Your verification is being processed. This usually takes 24-48 hours.</p>
                <div className="bg-orange-50 rounded-2xl p-4 mt-4">
                  <p className="text-sm text-orange-700">
                    üìß We'll notify you via email and SMS once your verification is complete.
                  </p>
                </div>
              </>
            )}
            
            {currentKYCStatus === 'verified' && (
              <>
                <div className="text-6xl mb-4">‚úÖ</div>
                <h2 className="text-2xl font-bold text-green-600 mb-2">KYC Verified</h2>
                <p className="text-gray-600">Your account is fully verified. You can now withdraw unlimited amounts.</p>
                <div className="bg-green-50 rounded-2xl p-4 mt-4">
                  <div className="space-y-2 text-sm text-green-700">
                    <p>‚úÖ Identity verified</p>
                    <p>‚úÖ Bank account linked</p>
                    <p>‚úÖ Unlimited withdrawals enabled</p>
                  </div>
                </div>
              </>
            )}
            
            {currentKYCStatus === 'rejected' && (
              <>
                <div className="text-6xl mb-4">‚ùå</div>
                <h2 className="text-2xl font-bold text-red-600 mb-2">KYC Rejected</h2>
                <p className="text-gray-600">Your verification was rejected. Please check the issues and resubmit.</p>
                <div className="bg-red-50 rounded-2xl p-4 mt-4">
                  <div className="space-y-2 text-sm text-red-700">
                    <p>‚Ä¢ Aadhaar image unclear</p>
                    <p>‚Ä¢ PAN details mismatch</p>
                    <p>‚Ä¢ Bank account verification failed</p>
                  </div>
                </div>
                <button
                  onClick={() => setCurrentStep(1)}
                  className="w-full mt-4 py-3 bg-blue-500 text-white rounded-xl font-medium hover:bg-blue-600 transition-colors"
                >
                  Resubmit KYC
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md bg-white rounded-3xl shadow-2xl max-h-[90vh] overflow-y-auto">
        
        {/* Header */}
        <div className="sticky top-0 bg-white rounded-t-3xl border-b p-4 flex items-center justify-between">
          <h2 className="text-xl font-bold text-gray-800">KYC Verification</h2>
          <button
            onClick={onClose}
            className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center hover:bg-gray-200 transition-colors"
          >
            ‚úï
          </button>
        </div>

        {/* Progress Indicator */}
        <div className="p-4 pb-0">
          <div className="flex items-center justify-between mb-4">
            {steps.map((step, index) => (
              <div key={step.id} className="flex flex-col items-center">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold transition-all ${
                  currentStep > step.id 
                    ? 'bg-green-500 text-white' 
                    : currentStep === step.id 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-gray-200 text-gray-500'
                }`}>
                  {currentStep > step.id ? '‚úì' : step.id}
                </div>
                {index < steps.length - 1 && (
                  <div className={`absolute w-6 h-0.5 mt-4 ml-8 ${
                    currentStep > step.id ? 'bg-green-500' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
          
          <div className="text-center">
            <h3 className="font-bold text-gray-800">{steps[currentStep - 1].title}</h3>
            <p className="text-sm text-gray-600">{steps[currentStep - 1].description}</p>
          </div>
        </div>

        <div className="p-4 space-y-4">
          
          {/* Step 1: Personal Details */}
          {currentStep === 1 && (
            <div className="space-y-4">
              <div className="text-center text-4xl mb-4">üë§</div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Full Name *</label>
                <input
                  type="text"
                  value={formData.fullName}
                  onChange={(e) => handleInputChange('fullName', e.target.value)}
                  placeholder="As per Aadhaar card"
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Date of Birth *</label>
                <input
                  type="date"
                  value={formData.dateOfBirth}
                  onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Phone Number *</label>
                <input
                  type="tel"
                  value={formData.phoneNumber}
                  onChange={(e) => handleInputChange('phoneNumber', e.target.value)}
                  placeholder="10-digit mobile number"
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Email Address *</label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  placeholder="your@email.com"
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Address *</label>
                <textarea
                  value={formData.address}
                  onChange={(e) => handleInputChange('address', e.target.value)}
                  placeholder="Full address as per Aadhaar card"
                  rows={3}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none resize-none"
                />
              </div>
            </div>
          )}

          {/* Step 2: Identity Proof */}
          {currentStep === 2 && (
            <div className="space-y-4">
              <div className="text-center text-4xl mb-4">üÜî</div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Aadhaar Number *</label>
                <input
                  type="text"
                  value={formData.aadhaarNumber}
                  onChange={(e) => handleInputChange('aadhaarNumber', e.target.value.replace(/\D/g, '').slice(0, 12))}
                  placeholder="1234 5678 9012"
                  maxLength={12}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">12-digit Aadhaar number</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">PAN Number *</label>
                <input
                  type="text"
                  value={formData.panNumber}
                  onChange={(e) => handleInputChange('panNumber', e.target.value.toUpperCase().slice(0, 10))}
                  placeholder="ABCDE1234F"
                  maxLength={10}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none uppercase"
                />
                <p className="text-xs text-gray-500 mt-1">10-character PAN number</p>
              </div>

              <div className="bg-blue-50 rounded-2xl p-4">
                <h4 className="font-bold text-blue-800 mb-2">üõ°Ô∏è Privacy & Security</h4>
                <div className="space-y-1 text-sm text-blue-700">
                  <p>‚Ä¢ Your documents are encrypted and secure</p>
                  <p>‚Ä¢ Used only for KYC verification</p>
                  <p>‚Ä¢ Complies with RBI guidelines</p>
                  <p>‚Ä¢ Data never shared with third parties</p>
                </div>
              </div>
            </div>
          )}

          {/* Step 3: Bank Details */}
          {currentStep === 3 && (
            <div className="space-y-4">
              <div className="text-center text-4xl mb-4">üè¶</div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Bank Account Number *</label>
                <input
                  type="text"
                  value={formData.bankAccountNumber}
                  onChange={(e) => handleInputChange('bankAccountNumber', e.target.value.replace(/\D/g, ''))}
                  placeholder="Account number for withdrawals"
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">IFSC Code *</label>
                <input
                  type="text"
                  value={formData.ifscCode}
                  onChange={(e) => handleInputChange('ifscCode', e.target.value.toUpperCase())}
                  placeholder="ICIC0001234"
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none uppercase"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Account Holder Name *</label>
                <input
                  type="text"
                  value={formData.accountHolderName}
                  onChange={(e) => handleInputChange('accountHolderName', e.target.value)}
                  placeholder="Name as per bank account"
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div className="bg-yellow-50 rounded-2xl p-4">
                <h4 className="font-bold text-yellow-800 mb-2">‚ö†Ô∏è Important</h4>
                <div className="space-y-1 text-sm text-yellow-700">
                  <p>‚Ä¢ Account holder name must match PAN name</p>
                  <p>‚Ä¢ This account will be used for withdrawals</p>
                  <p>‚Ä¢ Ensure account is active and valid</p>
                </div>
              </div>
            </div>
          )}

          {/* Step 4: Documents */}
          {currentStep === 4 && (
            <div className="space-y-4">
              <div className="text-center text-4xl mb-4">üìÑ</div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Aadhaar Front Image *</label>
                  <div className="border-2 border-dashed border-gray-300 rounded-xl p-4 text-center">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => e.target.files && handleDocumentUpload('aadhaarFront', e.target.files[0])}
                      className="hidden"
                      id="aadhaar-front"
                    />
                    <label htmlFor="aadhaar-front" className="cursor-pointer">
                      {formData.documents.aadhaarFront ? (
                        <div className="text-green-600">‚úÖ Uploaded</div>
                      ) : (
                        <div>
                          <div className="text-2xl mb-2">üì±</div>
                          <p className="text-sm text-gray-600">Click to upload front image</p>
                        </div>
                      )}
                    </label>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Aadhaar Back Image *</label>
                  <div className="border-2 border-dashed border-gray-300 rounded-xl p-4 text-center">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => e.target.files && handleDocumentUpload('aadhaarBack', e.target.files[0])}
                      className="hidden"
                      id="aadhaar-back"
                    />
                    <label htmlFor="aadhaar-back" className="cursor-pointer">
                      {formData.documents.aadhaarBack ? (
                        <div className="text-green-600">‚úÖ Uploaded</div>
                      ) : (
                        <div>
                          <div className="text-2xl mb-2">üì±</div>
                          <p className="text-sm text-gray-600">Click to upload back image</p>
                        </div>
                      )}
                    </label>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">PAN Card Image *</label>
                  <div className="border-2 border-dashed border-gray-300 rounded-xl p-4 text-center">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => e.target.files && handleDocumentUpload('panCard', e.target.files[0])}
                      className="hidden"
                      id="pan-card"
                    />
                    <label htmlFor="pan-card" className="cursor-pointer">
                      {formData.documents.panCard ? (
                        <div className="text-green-600">‚úÖ Uploaded</div>
                      ) : (
                        <div>
                          <div className="text-2xl mb-2">üì±</div>
                          <p className="text-sm text-gray-600">Click to upload PAN image</p>
                        </div>
                      )}
                    </label>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Bank Passbook/Statement *</label>
                  <div className="border-2 border-dashed border-gray-300 rounded-xl p-4 text-center">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => e.target.files && handleDocumentUpload('bankPassbook', e.target.files[0])}
                      className="hidden"
                      id="bank-passbook"
                    />
                    <label htmlFor="bank-passbook" className="cursor-pointer">
                      {formData.documents.bankPassbook ? (
                        <div className="text-green-600">‚úÖ Uploaded</div>
                      ) : (
                        <div>
                          <div className="text-2xl mb-2">üì±</div>
                          <p className="text-sm text-gray-600">Click to upload bank proof</p>
                        </div>
                      )}
                    </label>
                  </div>
                </div>
              </div>

              <div className="bg-green-50 rounded-2xl p-4">
                <h4 className="font-bold text-green-800 mb-2">üì∏ Photo Tips</h4>
                <div className="space-y-1 text-sm text-green-700">
                  <p>‚Ä¢ Ensure images are clear and readable</p>
                  <p>‚Ä¢ Avoid glare and shadows</p>
                  <p>‚Ä¢ All corners should be visible</p>
                  <p>‚Ä¢ Maximum file size: 5MB per image</p>
                </div>
              </div>
            </div>
          )}

          {/* Step 5: Review */}
          {currentStep === 5 && (
            <div className="space-y-4">
              <div className="text-center text-4xl mb-4">‚úÖ</div>

              <div className="bg-gray-50 rounded-2xl p-4 space-y-3">
                <h4 className="font-bold text-gray-800">Review Your Information</h4>
                
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Name:</span>
                    <span className="font-medium">{formData.fullName}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Aadhaar:</span>
                    <span className="font-medium">****-****-{formData.aadhaarNumber.slice(-4)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">PAN:</span>
                    <span className="font-medium">{formData.panNumber}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Bank A/c:</span>
                    <span className="font-medium">****{formData.bankAccountNumber.slice(-4)}</span>
                  </div>
                </div>
              </div>

              <div className="bg-blue-50 rounded-2xl p-4">
                <h4 className="font-bold text-blue-800 mb-2">üìã What Happens Next?</h4>
                <div className="space-y-1 text-sm text-blue-700">
                  <p>1. Your documents will be verified within 24-48 hours</p>
                  <p>2. You'll receive an email/SMS notification</p>
                  <p>3. Once approved, unlimited withdrawals are enabled</p>
                  <p>4. Your information is kept secure and confidential</p>
                </div>
              </div>

              {isProcessing && (
                <div className="text-center p-4">
                  <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-2"></div>
                  <p className="text-blue-600 font-medium">Submitting KYC...</p>
                </div>
              )}
            </div>
          )}

          {/* Navigation Buttons */}
          <div className="flex gap-3">
            {currentStep > 1 && (
              <button
                onClick={handlePrevious}
                disabled={isProcessing}
                className="flex-1 py-3 border-2 border-gray-200 text-gray-700 rounded-xl font-medium hover:bg-gray-50 transition-colors disabled:opacity-50"
              >
                ‚Üê Previous
              </button>
            )}
            
            <button
              onClick={handleNext}
              disabled={isProcessing || !validateStep(currentStep)}
              className={`flex-1 py-3 rounded-xl font-medium text-white transition-all disabled:opacity-50 ${
                currentStep === 5 
                  ? 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700' 
                  : 'bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700'
              } disabled:cursor-not-allowed`}
            >
              {currentStep === 5 ? 'Submit KYC' : 'Next ‚Üí'}
            </button>
          </div>

          {/* Bottom Info */}
          <div className="text-center text-xs text-gray-500 space-y-1">
            <p>üîí Your data is encrypted and secure</p>
            <p>Complies with RBI KYC guidelines</p>
          </div>

        </div>
      </div>
    </div>
  )
}

export default KYCVerificationSystem