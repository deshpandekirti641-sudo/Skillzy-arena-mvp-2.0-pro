'use client'

import React, { useState, useEffect } from 'react'
import type { FC } from 'react'

interface GamePreviewProps {
  gameType: 'chess' | 'snake-ladder' | 'carrom'
  onStartMatch: () => void
  playerBalance: number
}

const MPLGamePreview: FC<GamePreviewProps> = ({ gameType, onStartMatch, playerBalance }) => {
  const [isLoading, setIsLoading] = useState(false)
  const [previewAnimation, setPreviewAnimation] = useState(0)

  useEffect(() => {
    const interval = setInterval(() => {
      setPreviewAnimation(prev => (prev + 1) % 3)
    }, 1000)
    return () => clearInterval(interval)
  }, [])

  const gameConfig = {
    chess: {
      title: '‚ôî Chess Master',
      subtitle: 'Strategic Battle Arena',
      description: 'Outsmart your opponent in the ultimate strategy game',
      color: 'from-amber-500 to-orange-600',
      icon: '‚ôî',
      difficulty: 'Expert Level'
    },
    'snake-ladder': {
      title: 'üêç Snake & Ladder',
      subtitle: 'Classic Board Adventure',
      description: 'Climb to victory while avoiding the snakes',
      color: 'from-green-500 to-emerald-600',
      icon: 'üêç',
      difficulty: 'Medium Level'
    },
    carrom: {
      title: 'üéØ Carrom Board',
      subtitle: 'Precision Strike Game',
      description: 'Perfect your aim and pocket all coins',
      color: 'from-blue-500 to-indigo-600',
      icon: 'üéØ',
      difficulty: 'Skill Level'
    }
  }

  const config = gameConfig[gameType]

  const handleStartMatch = async () => {
    if (playerBalance < 10) {
      alert('Insufficient balance! Minimum ‚Çπ10 required to play.')
      return
    }

    setIsLoading(true)
    // Simulate match initialization
    await new Promise(resolve => setTimeout(resolve, 2000))
    onStartMatch()
    setIsLoading(false)
  }

  return (
    <div className={`min-h-screen bg-gradient-to-br ${config.color} p-4 flex flex-col items-center justify-center`}>
      <div className="w-full max-w-md bg-white/95 backdrop-blur-lg rounded-3xl shadow-2xl p-6 space-y-6">
        
        {/* Game Header */}
        <div className="text-center space-y-2">
          <div className={`text-6xl mb-4 transition-transform duration-500 ${previewAnimation === 0 ? 'scale-110' : previewAnimation === 1 ? 'scale-100' : 'scale-105'}`}>
            {config.icon}
          </div>
          <h1 className="text-2xl font-bold text-gray-800">{config.title}</h1>
          <p className="text-sm font-medium text-gray-600">{config.subtitle}</p>
          <p className="text-xs text-gray-500">{config.description}</p>
        </div>

        {/* Game Stats */}
        <div className="bg-gray-50 rounded-2xl p-4 space-y-3">
          <div className="flex justify-between items-center">
            <span className="text-sm font-medium text-gray-700">Entry Fee</span>
            <span className="text-lg font-bold text-green-600">‚Çπ10</span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-sm font-medium text-gray-700">Winner Gets</span>
            <span className="text-lg font-bold text-blue-600">‚Çπ16</span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-sm font-medium text-gray-700">Match Duration</span>
            <span className="text-sm font-bold text-gray-800">60 seconds</span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-sm font-medium text-gray-700">Difficulty</span>
            <span className="text-sm font-bold text-purple-600">{config.difficulty}</span>
          </div>
        </div>

        {/* Player Balance */}
        <div className="bg-gradient-to-r from-green-400 to-green-500 rounded-2xl p-4 text-white text-center">
          <p className="text-sm font-medium opacity-90">Your Balance</p>
          <p className="text-2xl font-bold">‚Çπ{playerBalance}</p>
        </div>

        {/* Game Preview Animation */}
        <div className="bg-gray-100 rounded-2xl p-6 text-center">
          <div className="text-4xl mb-2">
            {gameType === 'chess' && (previewAnimation === 0 ? '‚ôî' : previewAnimation === 1 ? '‚ôï' : '‚ôû')}
            {gameType === 'snake-ladder' && (previewAnimation === 0 ? 'üé≤' : previewAnimation === 1 ? 'üêç' : 'ü™ú')}
            {gameType === 'carrom' && (previewAnimation === 0 ? '‚ö™' : previewAnimation === 1 ? 'üî¥' : '‚ö´')}
          </div>
          <p className="text-xs text-gray-600">Game Preview</p>
        </div>

        {/* Action Buttons */}
        <div className="space-y-3">
          <button
            onClick={handleStartMatch}
            disabled={isLoading || playerBalance < 10}
            className={`w-full py-4 rounded-2xl text-white font-bold text-lg transition-all duration-300 ${
              isLoading 
                ? 'bg-gray-400 cursor-not-allowed' 
                : playerBalance < 10
                ? 'bg-red-400 cursor-not-allowed'
                : `bg-gradient-to-r ${config.color} hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl`
            }`}
          >
            {isLoading ? (
              <div className="flex items-center justify-center space-x-2">
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                <span>Finding Opponent...</span>
              </div>
            ) : playerBalance < 10 ? (
              'Insufficient Balance'
            ) : (
              'Start Match ‚Çπ10'
            )}
          </button>

          <button className="w-full py-3 rounded-2xl bg-gray-100 text-gray-700 font-medium text-sm hover:bg-gray-200 transition-colors">
            How to Play
          </button>
        </div>

        {/* Bottom Info */}
        <div className="text-center text-xs text-gray-500 space-y-1">
          <p>üèÜ 80% to Winner ‚Ä¢ 20% Platform Fee</p>
          <p>‚ö° Instant Payout ‚Ä¢ üîí Secure Gaming</p>
        </div>

      </div>
    </div>
  )
}

export default MPLGamePreview