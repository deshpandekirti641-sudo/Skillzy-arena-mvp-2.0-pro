'use client';

import React, { useState } from 'react';
import { useLanguage } from '../hooks/useLanguageSystem';

interface LanguageSelectorProps {
  className?: string;
  showFlags?: boolean;
  compact?: boolean;
}

const LanguageSelector: React.FC<LanguageSelectorProps> = ({ 
  className = '', 
  showFlags = true, 
  compact = false 
}) => {
  const { currentLanguage, setLanguage, availableLanguages, t } = useLanguage();
  const [isOpen, setIsOpen] = useState<boolean>(false);

  const currentLang = availableLanguages.find(lang => lang.code === currentLanguage);

  const handleLanguageSelect = (langCode: string): void => {
    setLanguage(langCode);
    setIsOpen(false);
  };

  return (
    <div className={`relative inline-block ${className}`}>
      {/* Language Selector Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={`
          flex items-center gap-2 px-3 py-2 rounded-lg
          bg-white/10 hover:bg-white/20 transition-all duration-200
          text-white border border-white/20 hover:border-white/40
          ${compact ? 'text-sm' : 'text-base'}
        `}
      >
        {showFlags && currentLang && (
          <span className="text-lg">{currentLang.flag}</span>
        )}
        <span className={compact ? 'hidden sm:block' : ''}>
          {compact ? currentLang?.code.toUpperCase() : currentLang?.name}
        </span>
        <svg 
          className={`w-4 h-4 transition-transform ${isOpen ? 'rotate-180' : ''}`}
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      {/* Language Dropdown */}
      {isOpen && (
        <>
          {/* Overlay */}
          <div 
            className="fixed inset-0 z-10" 
            onClick={() => setIsOpen(false)}
          />
          
          {/* Dropdown Menu */}
          <div className="absolute top-full mt-2 left-0 z-20 bg-gray-900/95 backdrop-blur-sm rounded-xl border border-white/20 shadow-2xl min-w-[200px] max-h-64 overflow-y-auto">
            <div className="p-2">
              <h3 className="text-xs font-medium text-gray-400 mb-2 px-2">
                Select Language
              </h3>
              
              {availableLanguages.map((lang) => (
                <button
                  key={lang.code}
                  onClick={() => handleLanguageSelect(lang.code)}
                  className={`
                    w-full flex items-center gap-3 px-3 py-2 rounded-lg
                    hover:bg-white/10 transition-colors text-left
                    ${lang.code === currentLanguage ? 'bg-blue-500/20 text-blue-300' : 'text-white'}
                  `}
                >
                  {showFlags && (
                    <span className="text-lg">{lang.flag}</span>
                  )}
                  <div className="flex-1">
                    <div className="font-medium">{lang.name}</div>
                    <div className="text-xs text-gray-400">{lang.code.toUpperCase()}</div>
                  </div>
                  {lang.code === currentLanguage && (
                    <svg className="w-4 h-4 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  )}
                </button>
              ))}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default LanguageSelector;