'use client';

import { useState, useEffect } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Card, CardContent, CardHeader } from './ui/card';
import { Badge } from './ui/badge';
import { InputOTP, InputOTPGroup, InputOTPSlot } from './ui/input-otp';
import { Smartphone, Zap, Gift, Wallet, Users, Trophy, Crown, Sparkles } from 'lucide-react';
import { toast } from 'sonner';

interface MPLAuthProps {
  onAuthSuccess: () => void;
  networkQuality: 'excellent' | 'good' | 'poor' | 'offline';
  offlineMode: boolean;
}

type AuthStep = 'welcome' | 'mobile' | 'otp' | 'username' | 'success';

export function MPLAuth({ onAuthSuccess, networkQuality, offlineMode }: MPLAuthProps) {
  const [step, setStep] = useState<AuthStep>('welcome');
  const [mobileNumber, setMobileNumber] = useState('');
  const [otp, setOtp] = useState('');
  const [username, setUsername] = useState('');
  const [loading, setLoading] = useState(false);
  const [timeLeft, setTimeLeft] = useState(30);
  const [canResend, setCanResend] = useState(false);

  // Auto-advance demo for offline mode
  useEffect(() => {
    if (offlineMode && step === 'welcome') {
      setTimeout(() => setStep('mobile'), 1000);
    }
  }, [offlineMode, step]);

  // OTP countdown timer
  useEffect(() => {
    if (step === 'otp' && timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (step === 'otp' && timeLeft === 0) {
      setCanResend(true);
    }
  }, [step, timeLeft]);

  const handleMobileSubmit = async () => {
    if (!mobileNumber || mobileNumber.length !== 10) {
      toast.error('Please enter a valid 10-digit mobile number');
      return;
    }

    setLoading(true);
    
    try {
      if (offlineMode) {
        // Demo mode
        await new Promise(resolve => setTimeout(resolve, 1500));
        toast.success('OTP sent successfully! (Demo Mode)');
      } else {
        // Send OTP via API
        // await sendOTP(mobileNumber);
        await new Promise(resolve => setTimeout(resolve, 2000));
        toast.success('OTP sent to +91 ' + mobileNumber);
      }
      
      setStep('otp');
      setTimeLeft(30);
      setCanResend(false);
    } catch (error) {
      toast.error('Failed to send OTP. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleOTPSubmit = async () => {
    if (!otp || otp.length !== 6) {
      toast.error('Please enter complete 6-digit OTP');
      return;
    }

    setLoading(true);
    
    try {
      if (offlineMode) {
        // Demo mode - any 6 digit OTP works
        await new Promise(resolve => setTimeout(resolve, 1500));
        toast.success('OTP verified successfully! (Demo Mode)');
      } else {
        // Verify OTP via API  
        // await verifyOTP(mobileNumber, otp);
        await new Promise(resolve => setTimeout(resolve, 2000));
        toast.success('OTP verified successfully!');
      }
      
      setStep('username');
    } catch (error) {
      toast.error('Invalid OTP. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleUsernameSubmit = async () => {
    if (!username || username.length < 3) {
      toast.error('Username must be at least 3 characters');
      return;
    }

    if (!/^[a-zA-Z0-9_]+$/.test(username)) {
      toast.error('Username can only contain letters, numbers, and underscores');
      return;
    }

    setLoading(true);
    
    try {
      if (offlineMode) {
        // Demo mode
        await new Promise(resolve => setTimeout(resolve, 2000));
        toast.success('ðŸŽ‰ Welcome to Skillzy Arena! â‚¹10 bonus added!');
      } else {
        // Register user via API
        // await registerUser(mobileNumber, username);
        await new Promise(resolve => setTimeout(resolve, 2500));
        toast.success('ðŸŽ‰ Account created! Welcome bonus â‚¹10 added!');
      }
      
      setStep('success');
      setTimeout(() => {
        onAuthSuccess();
      }, 2000);
    } catch (error) {
      toast.error('Registration failed. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleResendOTP = async () => {
    setCanResend(false);
    setTimeLeft(30);
    
    try {
      if (offlineMode) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        toast.success('OTP resent successfully! (Demo Mode)');
      } else {
        // await resendOTP(mobileNumber);
        await new Promise(resolve => setTimeout(resolve, 1500));
        toast.success('OTP resent to +91 ' + mobileNumber);
      }
    } catch (error) {
      toast.error('Failed to resend OTP');
      setCanResend(true);
    }
  };

  // Welcome Screen - MPL Style
  if (step === 'welcome') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-purple-800 to-pink-900 flex items-center justify-center p-4">
        <div className="max-w-md w-full space-y-6">
          {/* Logo & Brand */}
          <div className="text-center space-y-4">
            <div className="relative">
              <div className="w-20 h-20 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-2xl mx-auto flex items-center justify-center shadow-2xl">
                <Crown className="w-10 h-10 text-white" />
              </div>
              <div className="absolute -top-1 -right-1">
                <div className="w-6 h-6 bg-red-500 rounded-full flex items-center justify-center animate-pulse">
                  <Sparkles className="w-3 h-3 text-white" />
                </div>
              </div>
            </div>
            
            <div className="space-y-2">
              <h1 className="text-4xl font-bold text-white">Skillzy Arena</h1>
              <p className="text-purple-200 text-lg">India's #1 Real Money Gaming</p>
              <div className="flex items-center justify-center gap-2 text-sm">
                <Badge className="bg-green-500 text-white">100% Safe</Badge>
                <Badge className="bg-blue-500 text-white">Instant Payout</Badge>
                <Badge className="bg-yellow-500 text-black">RNG Certified</Badge>
              </div>
            </div>
          </div>

          {/* Features Grid */}
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-white/10 backdrop-blur rounded-xl p-4 text-center">
              <Trophy className="w-8 h-8 text-yellow-400 mx-auto mb-2" />
              <p className="text-white text-sm font-medium">Chess Master</p>
              <p className="text-purple-200 text-xs">Strategic Battles</p>
            </div>
            
            <div className="bg-white/10 backdrop-blur rounded-xl p-4 text-center">
              <Users className="w-8 h-8 text-green-400 mx-auto mb-2" />
              <p className="text-white text-sm font-medium">Snake & Ladder</p>
              <p className="text-purple-200 text-xs">Classic Fun</p>
            </div>
            
            <div className="bg-white/10 backdrop-blur rounded-xl p-4 text-center">
              <Zap className="w-8 h-8 text-blue-400 mx-auto mb-2" />
              <p className="text-white text-sm font-medium">Carrom Board</p>
              <p className="text-purple-200 text-xs">Precision Game</p>
            </div>
            
            <div className="bg-white/10 backdrop-blur rounded-xl p-4 text-center">
              <Gift className="w-8 h-8 text-pink-400 mx-auto mb-2" />
              <p className="text-white text-sm font-medium">â‚¹10 Bonus</p>
              <p className="text-purple-200 text-xs">Welcome Gift</p>
            </div>
          </div>

          {/* Network Status */}
          <div className="text-center">
            <div className={`inline-flex items-center gap-2 px-3 py-1 rounded-full text-sm ${
              networkQuality === 'excellent' ? 'bg-green-500/20 text-green-300' :
              networkQuality === 'good' ? 'bg-yellow-500/20 text-yellow-300' :
              networkQuality === 'poor' ? 'bg-orange-500/20 text-orange-300' :
              'bg-red-500/20 text-red-300'
            }`}>
              <div className={`w-2 h-2 rounded-full ${
                networkQuality === 'excellent' ? 'bg-green-400' :
                networkQuality === 'good' ? 'bg-yellow-400' :
                networkQuality === 'poor' ? 'bg-orange-400' :
                'bg-red-400'
              } ${networkQuality !== 'offline' ? 'animate-pulse' : ''}`}></div>
              {offlineMode ? 'Demo Mode' : `Network: ${networkQuality}`}
            </div>
          </div>

          {/* Get Started Button */}
          <Button 
            onClick={() => setStep('mobile')} 
            className="w-full bg-gradient-to-r from-yellow-400 to-orange-500 text-black font-bold text-lg py-6 rounded-xl hover:from-yellow-300 hover:to-orange-400 transform hover:scale-105 transition-all duration-200 shadow-2xl"
          >
            <Smartphone className="w-5 h-5 mr-2" />
            Start Playing Now
          </Button>
          
          <p className="text-center text-purple-300 text-xs">
            By continuing, you agree to our Terms of Service
          </p>
        </div>
      </div>
    );
  }

  // Mobile Number Entry
  if (step === 'mobile') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-purple-800 to-pink-900 flex items-center justify-center p-4">
        <Card className="max-w-md w-full bg-white/10 backdrop-blur border-white/20">
          <CardHeader className="text-center space-y-4">
            <div className="w-16 h-16 bg-gradient-to-r from-green-400 to-blue-500 rounded-full mx-auto flex items-center justify-center">
              <Smartphone className="w-8 h-8 text-white" />
            </div>
            <div>
              <h2 className="text-2xl font-bold text-white">Enter Mobile Number</h2>
              <p className="text-purple-200">We'll send you a verification code</p>
            </div>
          </CardHeader>
          
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <div className="bg-white/20 p-3 rounded-lg">
                  <span className="text-white font-medium">+91</span>
                </div>
                <Input
                  type="tel"
                  placeholder="Enter 10-digit mobile number"
                  value={mobileNumber}
                  onChange={(e) => setMobileNumber(e.target.value.replace(/\D/g, '').slice(0, 10))}
                  className="flex-1 bg-white/10 border-white/20 text-white placeholder:text-white/60"
                  maxLength={10}
                />
              </div>
              {mobileNumber.length > 0 && mobileNumber.length !== 10 && (
                <p className="text-red-300 text-sm">Mobile number must be 10 digits</p>
              )}
            </div>

            <div className="space-y-3">
              <Button 
                onClick={handleMobileSubmit} 
                disabled={loading || mobileNumber.length !== 10}
                className="w-full bg-gradient-to-r from-green-500 to-blue-500 text-white font-bold py-3 disabled:opacity-50"
              >
                {loading ? 'Sending OTP...' : 'Send OTP'}
              </Button>
              
              <Button 
                variant="ghost" 
                onClick={() => setStep('welcome')}
                className="w-full text-white/80 hover:text-white"
              >
                Back
              </Button>
            </div>

            {offlineMode && (
              <div className="bg-blue-500/20 p-3 rounded-lg text-center">
                <p className="text-blue-200 text-sm">Demo Mode Active - Any mobile number works</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    );
  }

  // OTP Verification
  if (step === 'otp') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-purple-800 to-pink-900 flex items-center justify-center p-4">
        <Card className="max-w-md w-full bg-white/10 backdrop-blur border-white/20">
          <CardHeader className="text-center space-y-4">
            <div className="w-16 h-16 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full mx-auto flex items-center justify-center">
              <Zap className="w-8 h-8 text-white" />
            </div>
            <div>
              <h2 className="text-2xl font-bold text-white">Verify OTP</h2>
              <p className="text-purple-200">
                Code sent to +91 {mobileNumber.slice(0, 2)}****{mobileNumber.slice(-2)}
              </p>
            </div>
          </CardHeader>
          
          <CardContent className="space-y-6">
            <div className="space-y-4">
              <InputOTP 
                maxLength={6} 
                value={otp} 
                onChange={setOtp}
                className="justify-center"
              >
                <InputOTPGroup>
                  <InputOTPSlot index={0} className="bg-white/10 border-white/20 text-white text-xl" />
                  <InputOTPSlot index={1} className="bg-white/10 border-white/20 text-white text-xl" />
                  <InputOTPSlot index={2} className="bg-white/10 border-white/20 text-white text-xl" />
                  <InputOTPSlot index={3} className="bg-white/10 border-white/20 text-white text-xl" />
                  <InputOTPSlot index={4} className="bg-white/10 border-white/20 text-white text-xl" />
                  <InputOTPSlot index={5} className="bg-white/10 border-white/20 text-white text-xl" />
                </InputOTPGroup>
              </InputOTP>
              
              <div className="text-center">
                {canResend ? (
                  <Button 
                    variant="link" 
                    onClick={handleResendOTP}
                    className="text-blue-300 hover:text-blue-200"
                  >
                    Resend OTP
                  </Button>
                ) : (
                  <p className="text-white/60 text-sm">
                    Resend OTP in {timeLeft}s
                  </p>
                )}
              </div>
            </div>

            <div className="space-y-3">
              <Button 
                onClick={handleOTPSubmit} 
                disabled={loading || otp.length !== 6}
                className="w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white font-bold py-3 disabled:opacity-50"
              >
                {loading ? 'Verifying...' : 'Verify OTP'}
              </Button>
              
              <Button 
                variant="ghost" 
                onClick={() => setStep('mobile')}
                className="w-full text-white/80 hover:text-white"
              >
                Change Number
              </Button>
            </div>

            {offlineMode && (
              <div className="bg-green-500/20 p-3 rounded-lg text-center">
                <p className="text-green-200 text-sm">Demo Mode - Any 6-digit code works</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    );
  }

  // Username Entry
  if (step === 'username') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-purple-800 to-pink-900 flex items-center justify-center p-4">
        <Card className="max-w-md w-full bg-white/10 backdrop-blur border-white/20">
          <CardHeader className="text-center space-y-4">
            <div className="w-16 h-16 bg-gradient-to-r from-yellow-400 to-red-500 rounded-full mx-auto flex items-center justify-center">
              <Users className="w-8 h-8 text-white" />
            </div>
            <div>
              <h2 className="text-2xl font-bold text-white">Choose Username</h2>
              <p className="text-purple-200">This will be your gaming identity</p>
            </div>
          </CardHeader>
          
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <Input
                type="text"
                placeholder="Enter your username"
                value={username}
                onChange={(e) => setUsername(e.target.value.toLowerCase().replace(/[^a-zA-Z0-9_]/g, '').slice(0, 15))}
                className="bg-white/10 border-white/20 text-white placeholder:text-white/60 text-lg py-3"
                maxLength={15}
              />
              
              <div className="space-y-1">
                <div className="flex justify-between text-sm">
                  <span className="text-white/60">Username requirements:</span>
                  <span className="text-white/60">{username.length}/15</span>
                </div>
                <div className="space-y-1 text-xs">
                  <div className={`flex items-center gap-2 ${username.length >= 3 ? 'text-green-300' : 'text-white/60'}`}>
                    <div className={`w-1 h-1 rounded-full ${username.length >= 3 ? 'bg-green-400' : 'bg-white/40'}`}></div>
                    At least 3 characters
                  </div>
                  <div className={`flex items-center gap-2 ${/^[a-zA-Z0-9_]+$/.test(username) && username.length > 0 ? 'text-green-300' : 'text-white/60'}`}>
                    <div className={`w-1 h-1 rounded-full ${/^[a-zA-Z0-9_]+$/.test(username) && username.length > 0 ? 'bg-green-400' : 'bg-white/40'}`}></div>
                    Only letters, numbers and underscore
                  </div>
                </div>
              </div>
            </div>

            {/* Welcome Bonus Preview */}
            <div className="bg-gradient-to-r from-yellow-500/20 to-orange-500/20 p-4 rounded-xl border border-yellow-500/30">
              <div className="flex items-center gap-3">
                <Gift className="w-8 h-8 text-yellow-400" />
                <div>
                  <p className="text-white font-medium">Welcome Bonus</p>
                  <p className="text-yellow-200 text-sm">Get â‚¹10 free to start playing!</p>
                </div>
              </div>
            </div>

            <div className="space-y-3">
              <Button 
                onClick={handleUsernameSubmit} 
                disabled={loading || username.length < 3 || !/^[a-zA-Z0-9_]+$/.test(username)}
                className="w-full bg-gradient-to-r from-yellow-400 to-red-500 text-black font-bold py-3 disabled:opacity-50"
              >
                {loading ? 'Creating Account...' : 'Create Account & Get â‚¹10'}
              </Button>
              
              <Button 
                variant="ghost" 
                onClick={() => setStep('otp')}
                className="w-full text-white/80 hover:text-white"
              >
                Back
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Success Screen
  if (step === 'success') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-900 via-green-800 to-emerald-900 flex items-center justify-center p-4">
        <div className="max-w-md w-full text-center space-y-6">
          <div className="relative">
            <div className="w-24 h-24 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full mx-auto flex items-center justify-center shadow-2xl animate-bounce">
              <Trophy className="w-12 h-12 text-white" />
            </div>
            <div className="absolute -top-2 -right-2">
              <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center animate-spin">
                <Sparkles className="w-4 h-4 text-white" />
              </div>
            </div>
          </div>
          
          <div className="space-y-3">
            <h2 className="text-4xl font-bold text-white">Welcome to Skillzy!</h2>
            <p className="text-green-200 text-xl">Account Created Successfully</p>
            
            <div className="bg-yellow-500/20 p-4 rounded-xl border border-yellow-500/30">
              <div className="flex items-center justify-center gap-3">
                <Wallet className="w-8 h-8 text-yellow-400" />
                <div>
                  <p className="text-white font-bold text-lg">â‚¹10 Bonus Added!</p>
                  <p className="text-yellow-200 text-sm">Start playing your favorite games</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="space-y-2 text-green-300">
            <p className="flex items-center justify-center gap-2">
              <Users className="w-4 h-4" />
              Joining thousands of players...
            </p>
            <div className="w-full bg-white/20 rounded-full h-2">
              <div className="bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full animate-pulse" style={{width: '100%'}}></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return null;
}