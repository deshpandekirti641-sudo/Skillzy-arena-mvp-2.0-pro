'use client';

import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Trophy, Clock, Brain, Calculator, Keyboard, Zap } from 'lucide-react';
import type { PlayerProfile, LeaderboardOverall, LeaderboardGame } from '../spacetime_module_bindings';

interface GameHubProps {
  playerProfile: PlayerProfile;
  overallLeaderboard: LeaderboardOverall[];
  gameLeaderboards: Record<string, LeaderboardGame[]>;
  onStartGame: (gameType: string) => void;
}

const GAMES = [
  {
    id: 'reaction-time',
    name: 'Reaction Time',
    description: 'Test your reflexes by clicking targets as fast as possible',
    icon: Zap,
    color: 'from-red-500 to-orange-500',
    gameType: 'ReactionTime'
  },
  {
    id: 'memory-patterns',
    name: 'Memory Patterns',
    description: 'Remember and repeat increasingly complex color sequences',
    icon: Brain,
    color: 'from-blue-500 to-purple-500',
    gameType: 'MemoryPatterns'
  },
  {
    id: 'number-rush',
    name: 'Number Rush',
    description: 'Solve math problems as quickly as possible under pressure',
    icon: Calculator,
    color: 'from-green-500 to-teal-500',
    gameType: 'NumberRush'
  },
  {
    id: 'speed-typing',
    name: 'Speed Typing',
    description: 'Type words at lightning speed to earn maximum points',
    icon: Keyboard,
    color: 'from-purple-500 to-pink-500',
    gameType: 'SpeedTyping'
  }
];

export function GameHub({ playerProfile, overallLeaderboard, gameLeaderboards, onStartGame }: GameHubProps) {
  const [selectedTab, setSelectedTab] = useState<'games' | 'leaderboard'>('games');

  const playerRank = overallLeaderboard.findIndex(entry => 
    entry.playerIdentity.toHexString() === playerProfile.identity.toHexString()
  ) + 1;

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-2">
            Skillzy Arena
          </h1>
          <p className="text-blue-200">
            Master your skills, climb the leaderboards, earn rewards
          </p>
        </div>

        {/* Player Stats */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Trophy className="w-5 h-5 text-yellow-500" />
              Welcome back, {playerProfile.username}!
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">
                  {Number(playerProfile.totalPoints).toLocaleString()}
                </div>
                <div className="text-sm text-gray-600">Total Points</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">
                  {playerProfile.totalGamesPlayed}
                </div>
                <div className="text-sm text-gray-600">Games Played</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">
                  #{playerRank || 'Unranked'}
                </div>
                <div className="text-sm text-gray-600">Global Rank</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-orange-600">
                  {playerProfile.totalGamesPlayed > 0 
                    ? Math.round(Number(playerProfile.totalPoints) / playerProfile.totalGamesPlayed)
                    : 0}
                </div>
                <div className="text-sm text-gray-600">Avg Points/Game</div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Tab Navigation */}
        <div className="flex justify-center mb-6">
          <div className="bg-white rounded-lg p-1 flex">
            <Button
              variant={selectedTab === 'games' ? 'default' : 'ghost'}
              onClick={() => setSelectedTab('games')}
              className="rounded-md"
            >
              Games
            </Button>
            <Button
              variant={selectedTab === 'leaderboard' ? 'default' : 'ghost'}
              onClick={() => setSelectedTab('leaderboard')}
              className="rounded-md"
            >
              Leaderboards
            </Button>
          </div>
        </div>

        {selectedTab === 'games' && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {GAMES.map((game) => {
              const Icon = game.icon;
              const gameStats = gameLeaderboards[game.gameType] || [];
              const playerGameRank = gameStats.findIndex(entry => 
                entry.playerIdentity.toHexString() === playerProfile.identity.toHexString()
              ) + 1;
              
              return (
                <Card key={game.id} className="overflow-hidden hover:shadow-lg transition-shadow cursor-pointer">
                  <div className={`h-2 bg-gradient-to-r ${game.color}`} />
                  <CardHeader>
                    <CardTitle className="flex items-center gap-3">
                      <div className={`p-2 rounded-lg bg-gradient-to-r ${game.color} text-white`}>
                        <Icon className="w-6 h-6" />
                      </div>
                      {game.name}
                      {playerGameRank > 0 && (
                        <Badge variant="secondary" className="ml-auto">
                          Rank #{playerGameRank}
                        </Badge>
                      )}
                    </CardTitle>
                    <CardDescription>
                      {game.description}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Button
                      onClick={() => onStartGame(game.id)}
                      className={`w-full bg-gradient-to-r ${game.color} hover:opacity-90`}
                    >
                      Start Game
                    </Button>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        )}

        {selectedTab === 'leaderboard' && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Overall Leaderboard */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Trophy className="w-5 h-5 text-yellow-500" />
                  Overall Leaderboard
                </CardTitle>
                <CardDescription>
                  Top players across all games
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {overallLeaderboard.slice(0, 10).map((entry) => (
                    <div 
                      key={entry.id} 
                      className={`flex items-center justify-between p-3 rounded-lg ${
                        entry.playerIdentity.toHexString() === playerProfile.identity.toHexString()
                          ? 'bg-purple-100 border-2 border-purple-300'
                          : 'bg-gray-50'
                      }`}
                    >
                      <div className="flex items-center gap-3">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                          entry.rank === 1 ? 'bg-yellow-500 text-white' :
                          entry.rank === 2 ? 'bg-gray-400 text-white' :
                          entry.rank === 3 ? 'bg-orange-500 text-white' :
                          'bg-gray-200'
                        }`}>
                          #{entry.rank}
                        </div>
                        <div>
                          <div className="font-medium">{entry.username}</div>
                          <div className="text-sm text-gray-500">
                            {entry.totalGames} games played
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-bold text-purple-600">
                          {Number(entry.totalPoints).toLocaleString()}
                        </div>
                        <div className="text-xs text-gray-500">points</div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Game-specific Leaderboards */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Clock className="w-5 h-5 text-blue-500" />
                  Game Leaderboards
                </CardTitle>
                <CardDescription>
                  Top performers in each game type
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {GAMES.map((game) => {
                    const gameStats = gameLeaderboards[game.gameType]?.slice(0, 3) || [];
                    if (gameStats.length === 0) return null;
                    
                    return (
                      <div key={game.gameType} className="border rounded-lg p-3">
                        <h4 className="font-medium text-sm mb-2 flex items-center gap-2">
                          <div className={`w-4 h-4 rounded bg-gradient-to-r ${game.color}`} />
                          {game.name}
                        </h4>
                        <div className="space-y-1">
                          {gameStats.map((entry) => (
                            <div key={entry.id} className="flex justify-between items-center text-sm">
                              <span className={
                                entry.playerIdentity.toHexString() === playerProfile.identity.toHexString()
                                  ? 'font-bold text-purple-600'
                                  : ''
                              }>
                                #{entry.rank} {entry.username}
                              </span>
                              <span className="text-gray-500">
                                {Number(entry.points).toLocaleString()}
                              </span>
                            </div>
                          ))}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
}