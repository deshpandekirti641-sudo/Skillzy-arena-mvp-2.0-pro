'use client'

import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Button } from '@/components/ui/button'

interface ServerStats {
  cpu: number
  memory: number
  disk: number
  network: number
  uptime: number
  activeConnections: number
  requestsPerSecond: number
  errorRate: number
  responseTime: number
}

interface DatabaseStats {
  connections: number
  queries: number
  slowQueries: number
  storage: number
  replication: 'healthy' | 'warning' | 'error'
}

interface LogEntry {
  id: string
  timestamp: number
  level: 'info' | 'warning' | 'error'
  message: string
  component: string
}

export const ServerMonitoring: React.FC = () => {
  const [serverStats, setServerStats] = useState<ServerStats>({
    cpu: 0,
    memory: 0,
    disk: 0,
    network: 0,
    uptime: 0,
    activeConnections: 0,
    requestsPerSecond: 0,
    errorRate: 0,
    responseTime: 0
  })

  const [dbStats, setDbStats] = useState<DatabaseStats>({
    connections: 0,
    queries: 0,
    slowQueries: 0,
    storage: 0,
    replication: 'healthy'
  })

  const [logs, setLogs] = useState<LogEntry[]>([])
  const [autoRefresh, setAutoRefresh] = useState(true)

  // Initialize with demo data
  useEffect(() => {
    setServerStats({
      cpu: 45.6,
      memory: 62.3,
      disk: 38.7,
      network: 15.2,
      uptime: 72.5,
      activeConnections: 1247,
      requestsPerSecond: 156,
      errorRate: 0.02,
      responseTime: 45
    })

    setDbStats({
      connections: 89,
      queries: 15420,
      slowQueries: 3,
      storage: 15.6,
      replication: 'healthy'
    })

    const initialLogs: LogEntry[] = [
      {
        id: 'LOG001',
        timestamp: Date.now() - 300000,
        level: 'info',
        message: 'SpacetimeDB connection established successfully',
        component: 'Database'
      },
      {
        id: 'LOG002',
        timestamp: Date.now() - 600000,
        level: 'info',
        message: 'New player registered: +91xxxxxxxxxx',
        component: 'Authentication'
      },
      {
        id: 'LOG003',
        timestamp: Date.now() - 900000,
        level: 'warning',
        message: 'High CPU usage detected: 78.5%',
        component: 'System'
      },
      {
        id: 'LOG004',
        timestamp: Date.now() - 1200000,
        level: 'info',
        message: 'Game match completed: Temple Run 3D',
        component: 'Game Engine'
      }
    ]
    setLogs(initialLogs)
  }, [])

  // Real-time updates simulation
  useEffect(() => {
    if (!autoRefresh) return

    const interval = setInterval(() => {
      setServerStats(prev => ({
        ...prev,
        cpu: Math.max(5, Math.min(95, prev.cpu + (Math.random() - 0.5) * 10)),
        memory: Math.max(20, Math.min(90, prev.memory + (Math.random() - 0.5) * 5)),
        disk: Math.max(10, Math.min(85, prev.disk + (Math.random() - 0.5) * 2)),
        network: Math.max(1, Math.min(50, prev.network + (Math.random() - 0.5) * 8)),
        activeConnections: Math.max(0, prev.activeConnections + Math.floor((Math.random() - 0.5) * 20)),
        requestsPerSecond: Math.max(0, prev.requestsPerSecond + Math.floor((Math.random() - 0.5) * 30)),
        responseTime: Math.max(10, Math.min(200, prev.responseTime + (Math.random() - 0.5) * 20)),
        uptime: prev.uptime + 0.01
      }))

      setDbStats(prev => ({
        ...prev,
        connections: Math.max(0, prev.connections + Math.floor((Math.random() - 0.5) * 10)),
        queries: prev.queries + Math.floor(Math.random() * 50),
        slowQueries: Math.max(0, prev.slowQueries + Math.floor((Math.random() - 0.7) * 3))
      }))

      // Add new log entry occasionally
      if (Math.random() < 0.2) {
        const logMessages = [
          { level: 'info' as const, message: 'Match started successfully', component: 'Game Engine' },
          { level: 'info' as const, message: 'Player wallet updated', component: 'Payment' },
          { level: 'warning' as const, message: 'Slow database query detected', component: 'Database' },
          { level: 'info' as const, message: 'KYC document uploaded', component: 'Authentication' }
        ]
        const randomLog = logMessages[Math.floor(Math.random() * logMessages.length)]
        const newLog: LogEntry = {
          id: `LOG${Date.now()}`,
          timestamp: Date.now(),
          ...randomLog
        }
        setLogs(prev => [newLog, ...prev.slice(0, 19)]) // Keep last 20 logs
      }
    }, 5000)

    return () => clearInterval(interval)
  }, [autoRefresh])

  const getStatusColor = (value: number, thresholds: { warning: number; danger: number }): string => {
    if (value >= thresholds.danger) return 'text-red-400 border-red-500/50 bg-red-500/20'
    if (value >= thresholds.warning) return 'text-yellow-400 border-yellow-500/50 bg-yellow-500/20'
    return 'text-green-400 border-green-500/50 bg-green-500/20'
  }

  const getProgressColor = (value: number, thresholds: { warning: number; danger: number }): string => {
    if (value >= thresholds.danger) return 'bg-red-500'
    if (value >= thresholds.warning) return 'bg-yellow-500'
    return 'bg-green-500'
  }

  const getLogIcon = (level: string): string => {
    switch (level) {
      case 'error': return '🔴'
      case 'warning': return '🟡'
      default: return '🟢'
    }
  }

  const formatUptime = (hours: number): string => {
    const days = Math.floor(hours / 24)
    const remainingHours = Math.floor(hours % 24)
    const minutes = Math.floor((hours % 1) * 60)
    return `${days}d ${remainingHours}h ${minutes}m`
  }

  return (
    <div className="space-y-6">
      {/* Server Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="bg-gradient-to-br from-blue-900/50 to-purple-900/50 border-blue-500/20">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-blue-300">💻 CPU Usage</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-2xl font-bold text-white">{serverStats.cpu.toFixed(1)}%</span>
                <Badge className={getStatusColor(serverStats.cpu, { warning: 70, danger: 85 })}>
                  {serverStats.cpu >= 85 ? '🔴' : serverStats.cpu >= 70 ? '🟡' : '🟢'}
                </Badge>
              </div>
              <Progress 
                value={serverStats.cpu} 
                className="h-2"
                style={{ 
                  backgroundColor: '#1f2937',
                  '--progress-foreground': getProgressColor(serverStats.cpu, { warning: 70, danger: 85 })
                } as React.CSSProperties}
              />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-900/50 to-blue-900/50 border-green-500/20">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-green-300">🧠 Memory Usage</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-2xl font-bold text-white">{serverStats.memory.toFixed(1)}%</span>
                <Badge className={getStatusColor(serverStats.memory, { warning: 75, danger: 90 })}>
                  {serverStats.memory >= 90 ? '🔴' : serverStats.memory >= 75 ? '🟡' : '🟢'}
                </Badge>
              </div>
              <Progress 
                value={serverStats.memory} 
                className="h-2"
                style={{ 
                  backgroundColor: '#1f2937',
                  '--progress-foreground': getProgressColor(serverStats.memory, { warning: 75, danger: 90 })
                } as React.CSSProperties}
              />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-yellow-900/50 to-orange-900/50 border-yellow-500/20">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-yellow-300">💾 Disk Usage</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-2xl font-bold text-white">{serverStats.disk.toFixed(1)}%</span>
                <Badge className={getStatusColor(serverStats.disk, { warning: 80, danger: 95 })}>
                  {serverStats.disk >= 95 ? '🔴' : serverStats.disk >= 80 ? '🟡' : '🟢'}
                </Badge>
              </div>
              <Progress 
                value={serverStats.disk} 
                className="h-2"
                style={{ 
                  backgroundColor: '#1f2937',
                  '--progress-foreground': getProgressColor(serverStats.disk, { warning: 80, danger: 95 })
                } as React.CSSProperties}
              />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-900/50 to-pink-900/50 border-purple-500/20">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-purple-300">🌐 Network I/O</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-2xl font-bold text-white">{serverStats.network.toFixed(1)} MB/s</span>
                <Badge className={getStatusColor(serverStats.network, { warning: 30, danger: 45 })}>
                  {serverStats.network >= 45 ? '🔴' : serverStats.network >= 30 ? '🟡' : '🟢'}
                </Badge>
              </div>
              <Progress 
                value={(serverStats.network / 50) * 100} 
                className="h-2"
                style={{ 
                  backgroundColor: '#1f2937',
                  '--progress-foreground': getProgressColor(serverStats.network, { warning: 30, danger: 45 })
                } as React.CSSProperties}
              />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Performance Metrics */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-black/20 border-white/10">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              ⚡ Performance Metrics
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="bg-blue-500/10 rounded-lg p-3 border border-blue-500/20">
                <div className="text-2xl font-bold text-blue-300">{serverStats.activeConnections}</div>
                <div className="text-sm text-gray-400">Active Connections</div>
              </div>
              <div className="bg-green-500/10 rounded-lg p-3 border border-green-500/20">
                <div className="text-2xl font-bold text-green-300">{serverStats.requestsPerSecond}</div>
                <div className="text-sm text-gray-400">Requests/sec</div>
              </div>
              <div className="bg-yellow-500/10 rounded-lg p-3 border border-yellow-500/20">
                <div className="text-2xl font-bold text-yellow-300">{serverStats.responseTime}ms</div>
                <div className="text-sm text-gray-400">Avg Response Time</div>
              </div>
              <div className="bg-red-500/10 rounded-lg p-3 border border-red-500/20">
                <div className="text-2xl font-bold text-red-300">{serverStats.errorRate.toFixed(3)}%</div>
                <div className="text-sm text-gray-400">Error Rate</div>
              </div>
            </div>
            <div className="bg-purple-500/10 rounded-lg p-3 border border-purple-500/20">
              <div className="text-2xl font-bold text-purple-300">{formatUptime(serverStats.uptime)}</div>
              <div className="text-sm text-gray-400">Server Uptime</div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-black/20 border-white/10">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              🗄️ Database Statistics
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="bg-blue-500/10 rounded-lg p-3 border border-blue-500/20">
                <div className="text-2xl font-bold text-blue-300">{dbStats.connections}</div>
                <div className="text-sm text-gray-400">DB Connections</div>
              </div>
              <div className="bg-green-500/10 rounded-lg p-3 border border-green-500/20">
                <div className="text-2xl font-bold text-green-300">{dbStats.queries.toLocaleString()}</div>
                <div className="text-sm text-gray-400">Total Queries</div>
              </div>
              <div className="bg-orange-500/10 rounded-lg p-3 border border-orange-500/20">
                <div className="text-2xl font-bold text-orange-300">{dbStats.slowQueries}</div>
                <div className="text-sm text-gray-400">Slow Queries</div>
              </div>
              <div className="bg-purple-500/10 rounded-lg p-3 border border-purple-500/20">
                <div className="text-2xl font-bold text-purple-300">{dbStats.storage.toFixed(1)} GB</div>
                <div className="text-sm text-gray-400">Storage Used</div>
              </div>
            </div>
            <div className="flex justify-between items-center bg-green-500/10 rounded-lg p-3 border border-green-500/20">
              <div className="text-sm text-gray-400">Replication Status</div>
              <Badge className="bg-green-500/20 text-green-300 border-green-500/50">
                ✅ Healthy
              </Badge>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* System Logs */}
      <Card className="bg-black/20 border-white/10">
        <CardHeader>
          <CardTitle className="text-white flex items-center justify-between">
            <span className="flex items-center gap-2">📋 System Logs</span>
            <div className="flex items-center gap-2">
              <Badge className={autoRefresh ? 'bg-green-500/20 text-green-300 border-green-500/50' : 'bg-gray-500/20 text-gray-300 border-gray-500/50'}>
                {autoRefresh ? '🔄 Auto-refresh' : '⏸️ Paused'}
              </Badge>
              <Button
                size="sm"
                variant="outline"
                onClick={() => setAutoRefresh(!autoRefresh)}
                className="border-white/20 text-white hover:bg-white/10"
              >
                {autoRefresh ? '⏸️ Pause' : '▶️ Resume'}
              </Button>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2 max-h-96 overflow-y-auto">
            {logs.map((log) => (
              <div
                key={log.id}
                className="flex items-start gap-3 p-3 bg-white/5 rounded-lg border border-white/10"
              >
                <div className="text-lg">{getLogIcon(log.level)}</div>
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="text-white font-medium">{log.component}</span>
                    <Badge 
                      variant="outline" 
                      className={
                        log.level === 'error' ? 'border-red-500/50 text-red-300' :
                        log.level === 'warning' ? 'border-yellow-500/50 text-yellow-300' :
                        'border-green-500/50 text-green-300'
                      }
                    >
                      {log.level.toUpperCase()}
                    </Badge>
                  </div>
                  <p className="text-gray-300 text-sm">{log.message}</p>
                  <p className="text-gray-500 text-xs">
                    {new Date(log.timestamp).toLocaleString()}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}