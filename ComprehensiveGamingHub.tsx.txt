'use client'

import React, { useState, useEffect } from 'react'
import type { FC } from 'react'
import useNetworkResilientSpacetime from '../hooks/useNetworkResilientSpacetime'

// Import all the systems we created
import MPLGamePreview from './MPLGamePreview'
import UPIPaymentSystem from './UPIPaymentSystem'
import ReferralSystem from './ReferralSystem'
import KYCVerificationSystem from './KYCVerificationSystem'
import TransactionHistory from './TransactionHistory'
import PlayLogsSystem from './PlayLogsSystem'
import ProfileDataSystem from './ProfileDataSystem'

interface ComprehensiveGamingHubProps {
  userData: any
  onStartGame: (gameType: string) => void
  onLogout: () => void
}

const ComprehensiveGamingHub: FC<ComprehensiveGamingHubProps> = ({
  userData,
  onStartGame,
  onLogout
}) => {
  const spacetime = useNetworkResilientSpacetime()
  
  const [activeModal, setActiveModal] = useState<string | null>(null)
  const [notifications, setNotifications] = useState<Array<{
    id: string
    type: 'success' | 'info' | 'warning' | 'error'
    message: string
    timestamp: Date
  }>>([])

  // Mock data for demos
  const [mockTransactions] = useState([
    {
      id: 'txn1',
      type: 'deposit' as const,
      amount: 500,
      status: 'completed' as const,
      description: 'Deposit via UPI',
      timestamp: new Date(Date.now() - 86400000).toISOString(),
      method: 'Google Pay'
    },
    {
      id: 'txn2', 
      type: 'win' as const,
      amount: 16,
      status: 'completed' as const,
      description: 'Won Chess match vs Player123',
      timestamp: new Date(Date.now() - 7200000).toISOString(),
      gameType: 'Chess',
      opponentName: 'Player123'
    },
    {
      id: 'txn3',
      type: 'bet' as const,
      amount: 10,
      status: 'completed' as const,
      description: 'Bet for Snake & Ladder match',
      timestamp: new Date(Date.now() - 3600000).toISOString(),
      gameType: 'Snake & Ladder'
    }
  ])

  const [mockPlayLogs] = useState([
    {
      id: 'log1',
      gameType: 'chess' as const,
      opponentName: 'ChessKing99',
      opponentId: 'user123',
      startTime: new Date(Date.now() - 1800000).toISOString(),
      endTime: new Date(Date.now() - 1200000).toISOString(),
      duration: 600,
      result: 'win' as const,
      score: { player: 1, opponent: 0 },
      betAmount: 10,
      winAmount: 16,
      gameData: {},
      timestamp: new Date(Date.now() - 1200000).toISOString()
    },
    {
      id: 'log2',
      gameType: 'snake-ladder' as const,
      opponentName: 'LuckyPlayer',
      opponentId: 'user456',
      startTime: new Date(Date.now() - 7200000).toISOString(),
      endTime: new Date(Date.now() - 6600000).toISOString(),
      duration: 600,
      result: 'loss' as const,
      score: { player: 45, opponent: 100 },
      betAmount: 10,
      winAmount: 0,
      gameData: {},
      timestamp: new Date(Date.now() - 6600000).toISOString()
    }
  ])

  const [mockProfile] = useState({
    userId: userData?.id || 'demo_user',
    username: userData?.username || 'SkillzyPlayer',
    fullName: userData?.fullName || 'Skillzy Player',
    email: userData?.email || 'player@skillzy.com',
    phoneNumber: userData?.phoneNumber || '9876543210',
    dateOfBirth: '1995-06-15',
    location: 'Mumbai, India',
    avatar: null,
    joinDate: userData?.createdAt || new Date().toISOString(),
    lastActive: new Date().toISOString(),
    isVerified: userData?.isVerified || false,
    kycStatus: userData?.kycStatus || 'not_started' as const,
    preferences: {
      notifications: true,
      emailUpdates: false,
      soundEffects: true,
      autoMatch: false,
      language: 'en',
      theme: 'light' as const
    },
    gameStats: {
      totalGames: userData?.gamesPlayed || 12,
      gamesWon: userData?.gamesWon || 7,
      currentWinStreak: 3,
      longestWinStreak: 5,
      favoriteGame: 'chess',
      totalPlayTime: 480,
      skillRating: 1250
    },
    socialData: {
      referralCode: userData?.referralCode || 'SKZ2024',
      friendsReferred: 8,
      friendsList: [],
      blockedUsers: [],
      achievements: [
        {
          id: 'first_win',
          title: 'First Victory',
          description: 'Win your first match',
          icon: '🏆',
          unlockedDate: new Date(Date.now() - 86400000 * 7).toISOString(),
          isRare: false
        },
        {
          id: 'chess_master',
          title: 'Chess Master',
          description: 'Win 10 chess matches',
          icon: '♔',
          unlockedDate: new Date(Date.now() - 86400000 * 3).toISOString(),
          isRare: true
        }
      ]
    },
    financialData: {
      currentBalance: userData?.balance || 150,
      totalDeposits: 500,
      totalWithdrawals: 200,
      totalEarnings: userData?.totalEarnings || 85,
      lifetimeWinnings: 285
    }
  })

  const addNotification = (type: 'success' | 'info' | 'warning' | 'error', message: string) => {
    const notification = {
      id: Date.now().toString(),
      type,
      message,
      timestamp: new Date()
    }
    setNotifications(prev => [...prev, notification])
    setTimeout(() => {
      setNotifications(prev => prev.filter(n => n.id !== notification.id))
    }, 5000)
  }

  const handleDeposit = async (amount: number, method: string, transactionId: string) => {
    const success = await spacetime.depositMoney(amount, method, transactionId)
    if (success) {
      addNotification('success', `₹${amount} deposited successfully!`)
      setActiveModal(null)
    } else {
      addNotification('error', 'Deposit failed. Please try again.')
    }
  }

  const handleWithdraw = async (amount: number, method: string, details: string) => {
    const success = await spacetime.withdrawMoney(amount, method, details)
    if (success) {
      addNotification('success', `₹${amount} withdrawal initiated!`)
      setActiveModal(null)
    } else {
      addNotification('error', 'Insufficient balance or withdrawal failed.')
    }
  }

  const handleStartGame = async (gameType: string) => {
    if (!userData || userData.balance < 10) {
      addNotification('warning', 'Insufficient balance! Minimum ₹10 required.')
      setActiveModal('payment')
      return
    }

    const matchId = await spacetime.findMatch(gameType, 10)
    if (matchId) {
      addNotification('info', 'Match found! Starting game...')
      onStartGame(gameType)
    } else {
      addNotification('error', 'Could not find a match. Try again.')
    }
  }

  const handleReferFriend = async (method: string) => {
    const success = await spacetime.referFriend(userData?.referralCode || 'SKZ2024', method)
    if (success) {
      addNotification('success', `Referral shared via ${method}!`)
    }
  }

  const handleKYCComplete = (kycData: any) => {
    addNotification('success', 'KYC submitted successfully! Review takes 24-48 hours.')
    setActiveModal(null)
  }

  const handleProfileUpdate = async (profileData: any) => {
    const success = await spacetime.updateProfile(profileData)
    if (success) {
      addNotification('success', 'Profile updated successfully!')
    } else {
      addNotification('error', 'Profile update failed. Please try again.')
    }
  }

  const handleDeleteAccount = () => {
    addNotification('info', 'Account deletion request received. Processing...')
    setTimeout(() => {
      addNotification('success', 'Account deleted successfully.')
      onLogout()
    }, 2000)
  }

  // Quick actions data
  const quickActions = [
    { id: 'add-money', icon: '💰', title: 'Add Money', subtitle: 'Instant deposit', action: () => setActiveModal('payment') },
    { id: 'withdraw', icon: '💸', title: 'Withdraw', subtitle: 'Cash out winnings', action: () => setActiveModal('payment') },
    { id: 'refer', icon: '👥', title: 'Refer Friends', subtitle: 'Earn ₹25 each', action: () => setActiveModal('referral') },
    { id: 'kyc', icon: '🆔', title: 'Complete KYC', subtitle: 'Unlock unlimited', action: () => setActiveModal('kyc') }
  ]

  const games = [
    { 
      id: 'chess', 
      title: 'Chess Master', 
      icon: '♔', 
      players: '1.2k online',
      difficulty: 'Expert',
      color: 'from-amber-500 to-orange-600'
    },
    { 
      id: 'snake-ladder', 
      title: 'Snake & Ladder', 
      icon: '🐍', 
      players: '850 online',
      difficulty: 'Medium', 
      color: 'from-green-500 to-emerald-600'
    },
    { 
      id: 'carrom', 
      title: 'Carrom Board', 
      icon: '🎯', 
      players: '620 online',
      difficulty: 'Skill', 
      color: 'from-blue-500 to-indigo-600'
    }
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      
      {/* Connection Status Bar */}
      {!spacetime.isConnected && (
        <div className={`w-full p-2 text-center text-sm font-medium ${
          spacetime.connectionQuality === 'offline' 
            ? 'bg-red-100 text-red-800' 
            : 'bg-yellow-100 text-yellow-800'
        }`}>
          {spacetime.isReconnecting 
            ? '🔄 Reconnecting...' 
            : spacetime.connectionQuality === 'offline'
            ? '📡 Offline Mode - Actions queued for sync'
            : '⚠️ Poor connection - Some features may be limited'
          }
        </div>
      )}

      {/* Notifications */}
      <div className="fixed top-4 right-4 z-50 space-y-2">
        {notifications.map((notification) => (
          <div
            key={notification.id}
            className={`px-4 py-2 rounded-xl text-sm font-medium shadow-lg backdrop-blur-lg ${
              notification.type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' :
              notification.type === 'info' ? 'bg-blue-100 text-blue-800 border border-blue-200' :
              notification.type === 'warning' ? 'bg-yellow-100 text-yellow-800 border border-yellow-200' :
              'bg-red-100 text-red-800 border border-red-200'
            }`}
          >
            {notification.message}
          </div>
        ))}
      </div>

      <div className="container mx-auto px-4 py-6 space-y-6">
        
        {/* Header Section */}
        <div className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6 space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="w-16 h-16 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center text-white text-2xl font-bold">
                {userData?.username?.charAt(0)?.toUpperCase() || 'S'}
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-800">
                  Welcome, {userData?.username || 'Player'}! 👋
                </h1>
                <p className="text-gray-600">Ready to win some money today?</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={() => setActiveModal('history')}
                className="p-2 bg-gray-100 rounded-full hover:bg-gray-200 transition-colors"
              >
                📊
              </button>
              <button
                onClick={() => setActiveModal('profile')}
                className="p-2 bg-gray-100 rounded-full hover:bg-gray-200 transition-colors"
              >
                ⚙️
              </button>
              <button
                onClick={onLogout}
                className="px-4 py-2 bg-red-100 text-red-600 rounded-full hover:bg-red-200 transition-colors text-sm font-medium"
              >
                Logout
              </button>
            </div>
          </div>

          {/* Balance and Stats */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="bg-gradient-to-r from-green-500 to-emerald-600 rounded-2xl p-4 text-white">
              <p className="text-sm opacity-90">Current Balance</p>
              <p className="text-2xl font-bold">₹{userData?.balance || 0}</p>
            </div>
            <div className="bg-gradient-to-r from-blue-500 to-indigo-600 rounded-2xl p-4 text-white">
              <p className="text-sm opacity-90">Games Won</p>
              <p className="text-2xl font-bold">{userData?.gamesWon || 0}</p>
            </div>
            <div className="bg-gradient-to-r from-purple-500 to-pink-600 rounded-2xl p-4 text-white">
              <p className="text-sm opacity-90">Total Earnings</p>
              <p className="text-2xl font-bold">₹{userData?.totalEarnings || 0}</p>
            </div>
            <div className="bg-gradient-to-r from-orange-500 to-red-600 rounded-2xl p-4 text-white">
              <p className="text-sm opacity-90">Win Rate</p>
              <p className="text-2xl font-bold">
                {userData?.gamesPlayed ? Math.round((userData.gamesWon / userData.gamesPlayed) * 100) : 0}%
              </p>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6">
          <h2 className="text-xl font-bold text-gray-800 mb-4">⚡ Quick Actions</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {quickActions.map((action) => (
              <button
                key={action.id}
                onClick={action.action}
                className="p-4 bg-gradient-to-br from-gray-50 to-gray-100 rounded-2xl hover:from-blue-50 hover:to-blue-100 transition-all duration-300 transform hover:scale-105 active:scale-95"
              >
                <div className="text-3xl mb-2">{action.icon}</div>
                <h3 className="font-bold text-gray-800 text-sm">{action.title}</h3>
                <p className="text-xs text-gray-600">{action.subtitle}</p>
              </button>
            ))}
          </div>
        </div>

        {/* Games Section */}
        <div className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6">
          <h2 className="text-xl font-bold text-gray-800 mb-4">🎮 Skill Games</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {games.map((game) => (
              <button
                key={game.id}
                onClick={() => setActiveModal(`game-${game.id}`)}
                className={`p-6 bg-gradient-to-br ${game.color} rounded-2xl text-white hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl`}
              >
                <div className="text-center space-y-3">
                  <div className="text-4xl">{game.icon}</div>
                  <div>
                    <h3 className="text-lg font-bold">{game.title}</h3>
                    <p className="text-sm opacity-90">{game.players}</p>
                    <p className="text-xs opacity-75">{game.difficulty} Level</p>
                  </div>
                  <div className="bg-black/20 rounded-xl p-3">
                    <p className="text-xs opacity-90">Entry Fee: ₹10</p>
                    <p className="font-bold">Winner Gets: ₹16</p>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Recent Activity */}
        <div className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-gray-800">📈 Recent Activity</h2>
            <button
              onClick={() => setActiveModal('logs')}
              className="text-blue-600 hover:text-blue-700 font-medium text-sm"
            >
              View All →
            </button>
          </div>
          
          <div className="space-y-3">
            {mockTransactions.slice(0, 3).map((transaction) => (
              <div key={transaction.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-xl">
                <div className="flex items-center space-x-3">
                  <div className="text-2xl">
                    {transaction.type === 'deposit' ? '💰' : 
                     transaction.type === 'win' ? '🏆' : 
                     transaction.type === 'bet' ? '🎮' : '💸'}
                  </div>
                  <div>
                    <p className="font-medium text-gray-800 text-sm">{transaction.description}</p>
                    <p className="text-xs text-gray-500">
                      {new Date(transaction.timestamp).toLocaleDateString('en-IN')}
                    </p>
                  </div>
                </div>
                <div className={`font-bold ${
                  transaction.type === 'deposit' || transaction.type === 'win' 
                    ? 'text-green-600' 
                    : 'text-red-600'
                }`}>
                  {transaction.type === 'deposit' || transaction.type === 'win' ? '+' : '-'}₹{transaction.amount}
                </div>
              </div>
            ))}
          </div>
        </div>

      </div>

      {/* Modals */}
      {activeModal === 'payment' && (
        <UPIPaymentSystem
          isOpen={true}
          onClose={() => setActiveModal(null)}
          onDeposit={handleDeposit}
          onWithdraw={handleWithdraw}
          currentBalance={userData?.balance || 0}
        />
      )}

      {activeModal === 'referral' && (
        <ReferralSystem
          isOpen={true}
          onClose={() => setActiveModal(null)}
          userCode={userData?.referralCode || 'SKZ2024'}
          referralEarnings={850}
          totalReferrals={8}
          onInviteFriend={handleReferFriend}
        />
      )}

      {activeModal === 'kyc' && (
        <KYCVerificationSystem
          isOpen={true}
          onClose={() => setActiveModal(null)}
          onVerificationComplete={handleKYCComplete}
          currentKYCStatus={userData?.kycStatus || 'not_started'}
        />
      )}

      {activeModal === 'history' && (
        <TransactionHistory
          isOpen={true}
          onClose={() => setActiveModal(null)}
          transactions={mockTransactions}
          currentBalance={userData?.balance || 0}
          totalDeposits={500}
          totalWithdrawals={200}
          totalWinnings={285}
        />
      )}

      {activeModal === 'logs' && (
        <PlayLogsSystem
          isOpen={true}
          onClose={() => setActiveModal(null)}
          playLogs={mockPlayLogs}
        />
      )}

      {activeModal === 'profile' && (
        <ProfileDataSystem
          isOpen={true}
          onClose={() => setActiveModal(null)}
          userProfile={mockProfile}
          onUpdateProfile={handleProfileUpdate}
          onDeleteAccount={handleDeleteAccount}
        />
      )}

      {/* Game Previews */}
      {activeModal?.startsWith('game-') && (
        <MPLGamePreview
          gameType={activeModal.split('-')[1] as 'chess' | 'snake-ladder' | 'carrom'}
          onStartMatch={() => handleStartGame(activeModal.split('-')[1])}
          playerBalance={userData?.balance || 0}
        />
      )}

    </div>
  )
}

export default ComprehensiveGamingHub